{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#teanga2-framework","title":"Teanga2 Framework","text":"<p>High Performance \u2022 Easy to Learn \u2022 Fast to Code \u2022 Ready for Production</p> <p>Teanga2, A Pandas for NLP.  Teanga2 is a layer-based data processing tool designed for efficient handling of common NLP tasks. Think of it as an advanced, specialized version of Pandas specifically for natural language processing. Teanga2 streamlines workflows, facilitates data manipulation capabilities, and simplifies complex NLP operations.</p>"},{"location":"#installation","title":"Installation","text":"<p>Follow our comprehensive Getting Started Guide to build your first project in minutes.</p>"},{"location":"#from-pypi","title":"from pypi","text":"<pre><code>pip install teanga2\n</code></pre>"},{"location":"#pip-from-git","title":"pip from git","text":"<pre><code>pip install git+https://github.com/teangaNLP/teanga2\n</code></pre>"},{"location":"#manually-with-pippoetry","title":"manually with pip/poetry","text":"<pre><code>https://github.com/TeangaNLP/teanga2.git\ncd teanga2\n# poetry\npoetry init\npoetry install\n# or pip \npip install .\n</code></pre>"},{"location":"#features","title":"Features:","text":"<ul> <li>\ud83d\ude80 Blazing Fast: Optimized for performance, designed for speed.</li> <li>\ud83e\udde0 Easy to Learn: Intuitive, minimalistic syntax that reduces learning curve.</li> <li>\u23f1\ufe0f Rapid Development: Write less code, achieve more.</li> </ul>"},{"location":"#why-choose-teanga2","title":"Why Choose Teanga2?","text":"<ul> <li>High Performance: Achieve lightning-fast responses with built-in optimizations.</li> <li>Fast to Code: Focus on building features, not boilerplate.</li> <li>Easy to Use: Clean and simple API design makes learning a breeze.</li> </ul>"},{"location":"#key-information","title":"Key Information:","text":"Feature Details Test Coverage 99% Package Version v1.2.0 Supported Python Versions 3.7, 3.8, 3.9, 3.10 License MIT Documentation Fully documented with examples"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>\u251c\u2500\u2500 docs\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 conf.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 html\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 img\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 index.rst\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 make.bat\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 Makefile\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 modules.rst\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 teanga.rst\n\u251c\u2500\u2500 examples\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 tokenizer_service.py\n\u251c\u2500\u2500 LICENSE\n\u251c\u2500\u2500 mkdocs-docs\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 assets\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 explanation.md\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 how-to-guides.md\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 index.md\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 reference\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 scripts\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 tutorials\n\u251c\u2500\u2500 mkdocs.yml\n\u251c\u2500\u2500 poetry.lock\n\u251c\u2500\u2500 pyproject.toml\n\u251c\u2500\u2500 pytest.ini\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 teanga\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 corpus.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 document.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 groups.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 layer_desc.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 __pycache__\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 rdf.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 service.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 transforms.py\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 utils.py\n\u2514\u2500\u2500 tests\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 test_corpus.py\n    \u2514\u2500\u2500 test_rdf.py\n</code></pre>"},{"location":"explanation/","title":"Teanga Core and DB","text":"<p>Teanga is a database and system designed for NLP with pretrained language models.</p>"},{"location":"explanation/#teanga-2-data-model","title":"Teanga 2 Data Model","text":"<p>The core idea of Teanga2 is the data model which descibes how the data is  represented and processed by services and stored in Teanga2 backends.</p>"},{"location":"explanation/#layers","title":"Layers","text":"<p>The Teanga2 data end consists of a set of layers that provide annotations. Layers are typed into the following kinds</p> <ul> <li>Character Layers: These layers represent text. A character layer consists of the unicode characters in that layer and the indexes correspond to each Unicode character. As such, while these layers are most frequently encoded as  UTF-8, other encodings can be handled as well.</li> <li>Span Layers: Span layers consist of annotations with a start position, end position and a data value. The indexes refer to the position in the  sublayer. Span layers are the most flexible form of annotation and are typically used to represent tokenisation and annotations such as named entities and terms.</li> <li>Division Layers: Division layers have a start position and a data value. The end  position of a div layer is assumed to be the start position of next annotation in this layer or the largest index in the sublayer. Div layers are typically  used to divide the text into sections such as sentences, paragraphs and chapters</li> <li>Element Layers: Element layers have a start position and a data value. The end position is assumed to be the start position plus one. Element layers are  most typically used for indicating metadata properties and a few annotations</li> <li>Sequence Layers: A sequence layer has only a data value on each annotation. Sequence layers are assumed to be in one-to-one correspondance with the indexes of the sublayer. These are typically used when there is a value for every  word (or sentence or paragraph) such as in part-of-speech tagging.</li> </ul> <p></p> <p>An example of each layer type is given in the above image and can be represented in YAML as follows:</p> <pre><code>_meta:\n    text:\n        type: characters\n    tokens:\n        type: span\n        base: text\n    upos:\n        type: seq\n        base: tokens\n        data: [\"ADJ\", ... \"X\"]\n    document:\n        type: div\n        base: text\n        default: [[0]]\n    author:\n        type: element\n        base: document\n        data: string\nVC90:\n    text: \"Teanga2 data model\"\n    tokens: [[0,7], [8,12], [13,18]]\n    upos: [\"PROPN\", \"NOUN\", \"NOUN\"]\n    author: [[0, \"John P. McCrae\"], [0, \"Somebody Else\"]]\n</code></pre>"},{"location":"explanation/#data","title":"Data","text":"<p>Each annotation in a Teanga 2 layer can have data. The folllowing types of data are available</p> <ul> <li>None: No data is associated with annotation. This is frequently used for layers that only divide the text, such as tokens, sentences or chapters</li> <li>String: A string value, such as the lemma for an entry.</li> <li>Enumeration: A string value, but limited to a list of possible values.</li> <li>Link: A reference to another annotation. If not specified this link is  assumed to refer to an annotation in the same layer by its index, however you may specify another layer by means of the <code>target</code> property.</li> <li>Typed Link: A link with a type, combines the enumeration and link data types</li> </ul> <p>As an example consider this (simplified) encoding of Universal Dependencies data</p> <pre><code>_meta:\n  text:\n    type: characters\n  words:\n    type: span\n    base: text\n    data: none\n  upos:\n    type: seq\n    base: words\n    data: [\"DET\",\"NOUN\",\"VERB\"]\n  dep:\n    type: seq\n    base: words\n    data: link\n    link_types: [\"root\",\"nsubj\",\"dobj\"]\n    target: dep\nkOJl:\n  text: \"this is an example\"\n  words: [[0,4], [5,7], [8,10], [11,17]]\n  upos: [\"DET\", \"VERB\", \"DET\", \"NOUN\"]\n  dep: [[1, \"nsubj\"], [1, \"root\"], [2, \"det\"], [1, \"dobj\"]]\n</code></pre> <p>In addition, the metadata may define a <code>value</code> for the layer. In this case, the layer does not need to be specified in the document and will be assumed  to be the default value. The primary use for this is in defining document layers as above</p>"},{"location":"explanation/#corpus-model","title":"Corpus Model","text":"<p>The corpus model of Teanga2 consists of a (ordered) sequence of documents which in turn consists of an (unordered) sequence of words. In addition, there are two meta properties <code>_meta</code> and <code>_order</code> which give the layer descriptions and the  order of the documents in the text.</p> <p>Each document is indexed by initial characters the Base64 encoding of the SHA-256 of the UTF-8 representation of the text. The  text representation consists of all character layers ordered by their key with the key appended before the text. Keys and text should be separated by a zero byte (<code>\\u0000</code>).  For example the following document:</p> <pre><code>en: Hello!\nde: Guten Tag!\n</code></pre> <p>The string to encode is as follows:</p> <pre><code>from base64 import b64encode\nfrom hashlib import sha256\n\nrep = \"de\\x00Guten Tag!\\x00en\\x00Hello!\\x00\"\nb64encode(sha256(rep.encode(\"utf-8\")).digest()).decode(\"ascii\")\n'SpKHmfUJ1IkFXito5Me/ssLZ0Xx+ma5jjXTDb2qXs88='\n</code></pre> <p>By default only the first 4 characters of the key are used so the representation of this document would be</p> <pre><code>SpKH:\n    en: Hello!\n    de: Guten Tag!\n</code></pre> <p>All keys in the document should be unique and are used to check the validity of the input. </p> <p>These keys are used by the <code>_order</code> meta to give the order of documents. In many serializations this may be omitted and instead the order of the keys in the document may be used instead of an explicit order.</p>"},{"location":"explanation/#documentation-and-rdf","title":"Documentation and RDF","text":"<p>Teanga2 is linked-data-aware and this can be used to provide documentation to  the user. This can be done with the special <code>_uri</code> property that can appear at several points in the document</p> <pre><code>_meta:\n    _uri: https://jmccrae.github.io/teanga2/meta/basic.yaml\n    author:\n        base: document\n        data: string\n        _uri: https://jmccrae.github.io/teanga2/props/author.html\njjVi:\n    _uri: corpus/doc1.yaml\n</code></pre> <p>As a property directly under <code>_meta</code> this indicates that this format will build on another model and includes all the layers of that corpus into this corpus.</p> <p>As a property of a layer, it indicates an description of the property. This  should ideally refer to an HTML page with embedded Turtle or RDFa annotation.</p> <p>If put directly as a document, this indicates that the document is stored in another file and the YAML document is effectively copied directly in as this document.</p>"},{"location":"reference/reference-corpus/","title":"Teanga Corpus Module","text":"<p>Corpus class for storing and processing text data.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; corpus = Corpus()\n&gt;&gt;&gt; corpus.add_layer_meta(\"text\")\n&gt;&gt;&gt; doc = corpus.add_doc(\"This is a document.\")\n</code></pre> Source code in <code>teanga/corpus.py</code> <pre><code>class Corpus:\n    \"\"\"Corpus class for storing and processing text data.\n\n        Examples:\n            &gt;&gt;&gt; corpus = Corpus()\n            &gt;&gt;&gt; corpus.add_layer_meta(\"text\")\n            &gt;&gt;&gt; doc = corpus.add_doc(\"This is a document.\")\n\n    \"\"\"\n    def __init__(self, db=None, new=False, db_corpus=None):\n        if db_corpus:\n            self.corpus = db_corpus\n            self.meta = self.corpus.meta\n        elif db:\n            if not TEANGA_DB:\n                teanga_db_fail()\n            if new and os.path.exists(db):\n                shutil.rmtree(db)\n            self.corpus = teangadb.Corpus(db)\n            self.meta = self.corpus.meta\n        else:\n            self.corpus = None\n            self.meta = {}\n            self._docs = []\n\n\n    def add_meta_from_service(self, service : Service):\n        \"\"\"Add the meta data of a service to the corpus. This is normally \n        required to call apply to a service\n\n        Args:\n            service: The service to add.\n\n        Examples:\n            &gt;&gt;&gt; corpus = Corpus()\n            &gt;&gt;&gt; class ExampleService:\n            ...     def requires(self):\n            ...         return {\"text\": {\"type\": \"characters\"}}\n            ...     def produces(self):\n            ...         return {\"first_char\": {\"type\": \"characters\"}}\n            &gt;&gt;&gt; corpus.add_meta_from_service(ExampleService())\n\n        Returns:\n            A number representing the arithmetic sum of `a` and `b`.\n        \"\"\"\n        for name, layer in chain(service.requires().items(), \n                                 service.produces().items()):\n            if \"type\" not in layer:\n                raise Exception(\"Layer type not specified.\" + str(layer))\n            desc = _layer_desc_from_kwargs(layer)\n            if name in self.meta and self.meta[name] != desc:\n                raise Exception(\"Layer with name \" + name +\n                                \" already exists with different meta.\")\n            elif name not in self.meta:\n                self.add_layer_meta(name, **layer)\n\n\n    def add_layer_meta(self, name:str=None,\n                       layer_type:str=\"characters\", base:str=None, \n                       data=None, link_types:list[str]=None,\n                       target:str=None, default=None,\n                       meta:dict={}):\n        \"\"\"Add a layer to the corpus.\n\n        Args:\n            name: str\n                Name of the layer.\n            layer_type: str\n                The type of the layer, can be \"characters\", \"span\", \"seq\", \n                \"element\" or \"div\".\n            base: str\n                The name of the layer on which the new layer is based.\n            data: list\n                The data of the layer, this can be the value \"string\", \"link\" or \n                a list of strings, for an enumeration of values\n            link_types: list\n                The types of the links, if the data is links.\n            target: str\n                The name of the target layer, if the data is links.\n            default:\n                A default value if none is given\n            meta: dict\n                Metadata properties of the layer.\n        \"\"\"\n        if self.corpus:\n            self.corpus.add_layer_meta(\n                    name, layer_type, {}, base, data, link_types, target, default)\n            return\n        if name is None:\n            raise Exception(\"Name of the layer is not specified.\")\n        if name in self.meta:\n            raise Exception(\"Layer with name \" + name + \" already exists.\")\n        if layer_type not in [\"characters\", \"span\", \"seq\", \"div\", \"element\"]:\n            raise Exception(\"Type of the layer is not valid.\")\n        if layer_type == \"characters\" and base is not None and base != \"\":\n            raise Exception(\"Layer of type characters cannot be based on\" +\n            \" another layer.\")\n        if layer_type == \"characters\":\n            self.meta[name] = LayerDesc(\"characters\")\n            return\n        if base is None:\n            raise Exception(\"Layer of type \" + layer_type + \" must be based on \" +\n            \"another layer.\")\n        self.meta[name] = LayerDesc(layer_type, base, data, link_types, \n                                    target, default, meta)\n\n    def add_doc(self, *args, **kwargs) -&gt; Document:\n        \"\"\"Add a document to the corpus.\n\n        Args:\n\n            If the corpus has only a single layer, the document can be added as a\n            string. If the corpus has multiple layers, the document must be added\n            by specifying the names of the layers and the data for each layer as\n            keyword arguments.\n\n        Examples:\n            &gt;&gt;&gt; corpus = Corpus()\n            &gt;&gt;&gt; corpus.add_layer_meta(\"text\")\n            &gt;&gt;&gt; doc = corpus.add_doc(\"This is a document.\")\n\n            &gt;&gt;&gt; corpus = Corpus()\n            &gt;&gt;&gt; corpus.add_layer_meta(\"en\", layer_type=\"characters\")\n            &gt;&gt;&gt; corpus.add_layer_meta(\"nl\", layer_type=\"characters\")\n            &gt;&gt;&gt; doc = corpus.add_doc(en=\"This is a document.\", nl=\"Dit is een document.\")\n\n        \"\"\"\n        char_layers = [name for (name, layer) in self.meta.items()\n                       if layer.layer_type == \"characters\"]\n        if len(char_layers) == 0:\n            raise Exception(\"No character layer found. \" +\n            \"Please add at least one character layer.\")\n        elif len(char_layers) == 1:\n            if len(args) == 1:\n                doc_id = teanga_id_for_doc(self.doc_ids,\n                        **{char_layers[0]: args[0]})\n                doc = Document(self.meta, id=doc_id, **{char_layers[0]: args[0]})\n                if self.corpus:\n                    self.corpus.add_doc({ char_layers[0]: args[0] })\n                    doc.corpus = self.corpus\n                else:\n                    self._docs.append((doc_id, doc))\n                return doc\n            elif len(kwargs) == 1 and list(kwargs.keys())[0] == char_layers[0]:\n                doc_id = teanga_id_for_doc(self.doc_ids,\n                                           **kwargs)\n                doc = Document(self.meta, id=doc_id, **kwargs)\n                if self.corpus:\n                    self.corpus.add_doc(**kwargs)\n                    doc.corpus = self.corpus\n                else:\n                    self._docs.append((doc_id, doc))\n                return doc\n            else:\n                raise Exception(\"Invalid arguments, please specify the text \" +\n                                \"or use correct layer names.\")\n        else:\n            if len(kwargs.keys()) == 0:\n                raise Exception(\"More than one character layer found \" +\n                                f\"{' '.join(char_layers)} \" +\n                                \"Please specify the layer names to add\")\n            if set(kwargs.keys()).issubset(set(char_layers)):\n                doc_id = teanga_id_for_doc(self.doc_ids,\n                                           **kwargs)\n                doc = Document(self.meta, id=doc_id, **kwargs)\n                if self.corpus:\n                    self.corpus.add_doc(kwargs)\n                    doc.corpus = self.corpus\n                else:\n                    self._docs.append((doc_id, doc))\n                return doc\n            else:\n                raise Exception(\"Invalid arguments, please specify the text \" +\n                                \"or use correct layer names.\")\n\n    @property\n    def doc_ids(self) -&gt; list[str]:\n        \"\"\"Return the document ids of the corpus.\n\n        Examples:\n            &gt;&gt;&gt; corpus = Corpus()\n            &gt;&gt;&gt; corpus.add_layer_meta(\"text\")\n            &gt;&gt;&gt; doc = corpus.add_doc(\"This is a document.\")\n            &gt;&gt;&gt; corpus.doc_ids\n            ['Kjco']\n\n        \"\"\"\n        if self.corpus:\n            return self.corpus.order\n        else:\n            return [doc[0] for doc in self._docs]\n\n    @property\n    def docs(self) -&gt; Iterator[tuple[str, Document]]:\n        \"\"\"Get all the documents in the corpus\n\n        Examples:\n            &gt;&gt;&gt; corpus = Corpus()\n            &gt;&gt;&gt; corpus.add_layer_meta(\"text\")\n            &gt;&gt;&gt; doc = corpus.add_doc(\"This is a document.\")\n            &gt;&gt;&gt; list(corpus.docs)\n            [('Kjco', Document('Kjco', {'text': CharacterLayer('This is a document.')}))]\n\n        \"\"\"\n        if self.corpus:\n            for doc_id in self.corpus.order:\n                yield (doc_id, Document(self.meta, id=doc_id, corpus=self.corpus, \n                                        **self.corpus.get_doc_by_id(doc_id)))\n        else:\n            for doc in self._docs:\n                yield doc\n\n    def doc_by_id(self, doc_id:str) -&gt; Document:\n        \"\"\"\n        Get a document by its id.\n\n        Args:\n            doc_id: str\n                The id of the document.\n\n        Examples:\n            &gt;&gt;&gt; corpus = Corpus()\n            &gt;&gt;&gt; corpus.add_layer_meta(\"text\")\n            &gt;&gt;&gt; doc = corpus.add_doc(\"This is a document.\")\n            &gt;&gt;&gt; corpus.doc_by_id(\"Kjco\")\n            Document('Kjco', {'text': CharacterLayer('This is a document.')})\n\n            &gt;&gt;&gt; if TEANGA_DB:\n            ...   corpus = Corpus(\"tmp\",new=True)\n            ...   corpus.add_layer_meta(\"text\")\n            ...   doc = corpus.add_doc(\"This is a document.\")\n\n        \"\"\"\n        if self.corpus:\n            return Document(self.meta, id=doc_id, corpus=self.corpus,\n                            **self.corpus.get_doc_by_id(doc_id))\n        else:\n            for doc in self._docs:\n                if doc[0] == doc_id:\n                    return doc[1]\n            raise Exception(\"Document with id \" + doc_id + \" not found.\")\n\n    @property\n    def meta(self) -&gt; dict[str, LayerDesc]:\n        \"\"\"Return the meta data of the corpus.\n\n        Examples:\n            &gt;&gt;&gt; corpus = Corpus()\n            &gt;&gt;&gt; corpus.add_layer_meta(\"text\")\n            &gt;&gt;&gt; corpus.meta\n            {'text': LayerDesc(layer_type='characters', base=None, data=None, \\\n    link_types=None, target=None, default=None, meta={})}\n        \"\"\"\n        if self.corpus:\n            return {\n                    key: LayerDesc(layer_type=layer.layer_type, base=layer.base,\n                                  data=layer.data, link_types=layer.link_types,\n                                  target=layer.target, default=layer.default,\n                                  meta=layer.meta)\n                    for key, layer in self.corpus.meta.items() }\n        else:\n            return self._meta\n\n    @meta.setter\n    def meta(self, meta: dict[str, LayerDesc]):\n        if self.corpus:\n            self.corpus.meta = meta\n        else:\n            self._meta = meta\n\n    def text_freq(self, layer:str, \n                  condition : Union[str, \n            Callable[[str], bool], list] = None) -&gt; dict[str, int]:\n        \"\"\"Get the frequence of a text string in the corpus.\n\n        Args:\n            layer\n                The layer to get the frequency of (e.g. \"text\")\n            condition\n                A filter to match to. If a single string is given, the frequency\n                of this single word is returned. If a list of strings is given, the \n                frequency of each string is returned. If a function is given, all \n                strings are returned for which the function returns True.\n\n        Returns:\n            A dictionary with the frequency of each string.\n\n        Examples:\n            &gt;&gt;&gt; corpus = Corpus()\n            &gt;&gt;&gt; corpus.add_layer_meta(\"text\")\n            &gt;&gt;&gt; corpus.add_layer_meta(\"words\", layer_type=\"span\", base=\"text\")\n            &gt;&gt;&gt; doc = corpus.add_doc(\"This is a document.\")\n            &gt;&gt;&gt; doc.words = [(0, 4), (5, 7), (8, 9), (10, 18)]\n            &gt;&gt;&gt; corpus.text_freq(\"words\")\n            Counter({'This': 1, 'is': 1, 'a': 1, 'document': 1})\n            &gt;&gt;&gt; corpus.text_freq(\"words\", lambda x: \"i\" in x)\n            Counter({'This': 1, 'is': 1})\n\n        \"\"\"\n        if condition is None:\n            return Counter(word\n                for _, doc in self.docs\n                for word in doc[layer].text)\n        elif isinstance(condition, str):\n            return Counter(word\n                for _, doc in self.docs\n                           for word in doc[layer].text\n                           if word == condition)\n        elif callable(condition):\n            return Counter(word\n                for _, doc in self.docs\n                for word in doc[layer].text\n                           if condition(word))\n        else:\n            return Counter(word\n                for _, doc in self.docs\n                for word in doc[layer].text\n                           if word in condition)\n\n    def val_freq(self, layer:str,\n                 condition = None) -&gt; Counter:\n        \"\"\"Get the frequency of a value in a layer.\n\n        Args:\n            layer\n                The layer to get the frequency of (e.g. \"pos\")\n            condition\n                The value to get the frequency of. If a single value is given, the\n                frequency of this single value is returned. If a list of values is\n                given, the frequency of each value is returned. If a function is\n                given, all values are returned for which the function returns True.\n\n        Returns:\n            A dictionary with the frequency of each value.\n\n        Examples:\n            &gt;&gt;&gt; corpus = Corpus()\n            &gt;&gt;&gt; corpus.add_layer_meta(\"text\")\n            &gt;&gt;&gt; corpus.add_layer_meta(\"words\", layer_type=\"span\", base=\"text\")\n            &gt;&gt;&gt; corpus.add_layer_meta(\"pos\", layer_type=\"seq\", base=\"words\",\n            ...                        data=[\"NOUN\", \"VERB\", \"ADJ\"])\n            &gt;&gt;&gt; doc = corpus.add_doc(\"Colorless green ideas sleep furiously.\")\n            &gt;&gt;&gt; doc.words = [(0, 9), (10, 15), (16, 21), (22, 28), (29, 37)]\n            &gt;&gt;&gt; doc.pos = [\"ADJ\", \"ADJ\", \"NOUN\", \"VERB\", \"ADV\"]\n            &gt;&gt;&gt; corpus.val_freq(\"pos\")\n            Counter({'ADJ': 2, 'NOUN': 1, 'VERB': 1, 'ADV': 1})\n            &gt;&gt;&gt; corpus.val_freq(\"pos\", [\"NOUN\", \"VERB\"])\n            Counter({'NOUN': 1, 'VERB': 1})\n            &gt;&gt;&gt; corpus.val_freq(\"pos\", lambda x: x[0] == \"A\")\n            Counter({'ADJ': 2, 'ADV': 1})\n\n        \"\"\"\n        if condition is None:\n            return Counter(val\n                for _, doc in self.docs\n                for val in doc[layer].data)\n        elif isinstance(condition, str):\n            return Counter(val\n                for _, doc in self.docs\n                for val in doc[layer].data\n                           if val == condition)\n        elif callable(condition):\n            return Counter(val\n                for _, doc in self.docs\n                for val in doc[layer].data\n                           if condition(val))\n        else:\n            return Counter(val\n                for _, doc in self.docs\n                for val in doc[layer].data\n                           if val in condition)\n\n    def by_doc(self) -&gt; GroupedCorpus:\n        \"\"\"Group the corpus by document to enable analysis such as frequency\n        analysis on a per document basis.\n        \"\"\"\n        return GroupedCorpus(self, \n                             {doc_id: [doc_id] for doc_id in self.doc_ids})\n\n\n    def by(self, layer:str) -&gt; GroupedCorpus:\n        \"\"\"Group the corpus according to which documents have specific values\n        of a layer. Mostly used for metadata layers (e.g., \"author\", \"genre\")\n        \"\"\"\n        grouping = defaultdict(list)\n        for doc_id, doc in self.docs:\n            if layer in doc:\n                for value in doc[layer].data:\n                    grouping[value].append(doc_id)\n        return GroupedCorpus(self, grouping)\n\n    def search(self, query=None, **kwargs) -&gt; Iterator[str]:\n        \"\"\"Search for documents in the corpus.\n\n        Args:\n            kwargs, query:\n                The search criteria. The keys are the layer names and the values\n                can be either a string, a list of strings or a dictionary with values\n                describing the search criteria.\n\n                If the value is a string the search is interpreted as an exact \n                match. If the layer has no data this is applied to the text \n                otherwise it is applied to the data.\n\n                If the value is a list of strings, the search is interpreted as a\n                search for any of the strings in the list.\n\n                For dictionaries, the following keys are supported:\n                `$text`: The value on the base character layer equal this value.\n                `$text_ne`: The value on the base character layer must not equal this value.\n                `$eq`: The value must be equal to this value.\n                `$ne`: The value must not be equal to this value.\n                `$gt`: The value must be greater than this value.\n                `$lt`: The value must be less than this value.\n                `$gte`: The value must be greater than or equal to this value.\n                `$lte`: The value must be less than or equal to this value.\n                `$in`: The value must be in this list.\n                `$nin`: The value must not be in this list.\n                `$text_in`: The value on the base character layer must be in this list.\n                `$text_nin`: The value on the base character layer must not be in this list.\n                `$regex`: The value must match this regular expression.\n                `$text_regex`: The value on the base character layer must match \n                    this regular expression.\n                `$and`: All the conditions in this list must be true.\n                `$or`: At least one of the conditions in this list must be true.\n                `$not`: The condition in this list must not be true.\n                `$exists`: A particular layer must exist.\n\n        Returns:\n            An iterator over the document ids that match the search criteria.\n\n        Examples:\n            &gt;&gt;&gt; corpus = Corpus()\n            &gt;&gt;&gt; corpus.add_layer_meta(\"text\")\n            &gt;&gt;&gt; corpus.add_layer_meta(\"words\", layer_type=\"span\", base=\"text\")\n            &gt;&gt;&gt; corpus.add_layer_meta(\"pos\", layer_type=\"seq\", base=\"words\",\n            ...                        data=[\"NOUN\", \"VERB\", \"ADJ\"])\n            &gt;&gt;&gt; corpus.add_layer_meta(\"lemma\", layer_type=\"seq\", base=\"words\",\n            ...                        data=\"string\")\n            &gt;&gt;&gt; doc = corpus.add_doc(\"Colorless green ideas sleep furiously.\")\n            &gt;&gt;&gt; doc.words = [(0, 9), (10, 15), (16, 21), (22, 27), (28, 37)]\n            &gt;&gt;&gt; doc.pos = [\"ADJ\", \"ADJ\", \"NOUN\", \"VERB\", \"ADV\"]\n            &gt;&gt;&gt; doc.lemma = [\"colorless\", \"green\", \"idea\", \"sleep\", \"furiously\"]\n            &gt;&gt;&gt; list(corpus.search(pos=\"NOUN\"))\n            ['9wpe']\n            &gt;&gt;&gt; list(corpus.search(pos=[\"NOUN\", \"VERB\"]))\n            ['9wpe']\n            &gt;&gt;&gt; list(corpus.search(pos={\"$in\": [\"NOUN\", \"VERB\"]}))\n            ['9wpe']\n            &gt;&gt;&gt; list(corpus.search(pos={\"$regex\": \"N.*\"}))\n            ['9wpe']\n            &gt;&gt;&gt; list(corpus.search(pos=\"VERB\", lemma=\"sleep\"))\n            ['9wpe']\n            &gt;&gt;&gt; list(corpus.search(pos=\"VERB\", words=\"idea\"))\n            []\n            &gt;&gt;&gt; list(corpus.search(pos=\"VERB\", words=\"ideas\"))\n            ['9wpe']\n            &gt;&gt;&gt; list(corpus.search({\"pos\": \"VERB\", \"lemma\": \"sleep\"}))\n            ['9wpe']\n            &gt;&gt;&gt; list(corpus.search({\"$and\": {\"pos\": \"VERB\", \"lemma\": \"sleep\"}}))\n            ['9wpe']\n        \"\"\"\n        if kwargs and query:\n            raise Exception(\"Cannot specify both query and kwargs.\")\n        if self.corpus:\n            if kwargs:\n                query = self.normalise_query(kwargs)\n            else:\n                query = self.normalise_query(query)\n            for result in self.corpus.search(query):\n                yield result\n        else:\n            if kwargs:\n                for doc_id, doc in self.docs:\n                    if all(next(doc[layer].matches(value), None) \n                           for layer, value in kwargs.items()):\n                        yield doc_id\n            else:\n                for doc_id, doc in self.docs:\n                    for key, value in query.items():\n                        if not self._doc_matches(doc, key, value):\n                            break\n                    else:\n                        yield doc_id\n\n    def normalise_query(self, query):\n        \"\"\"Normalise a query by replacing all field values with either `$eq` or \n        `$text`\n        \"\"\"\n        q2 = {}\n        for key, value in query.items():\n            if isinstance(value, list):\n                if all(isinstance(v, str) for v in value):\n                    if key in self.meta and self.meta[key].data is None:\n                        q2[key] = {\"$text_in\": value}\n                    else:\n                        q2[key] = {\"$in\": value}\n            elif isinstance(value, dict):\n                q2[key] = value\n            elif key in self.meta and self.meta[key].data is None:\n                q2[key] = {\"$text\": value}\n            else:\n                q2[key] = {\"$eq\": value}\n        return q2\n\n\n    def _doc_matches(self, doc, key, value):\n        \"\"\"\n        \"\"\"\n        if key == \"$exists\":\n            return value in doc.layers\n        elif key == \"$and\":\n            return all(self._doc_matches(doc, k, v) for k, v in value.items())\n        elif key == \"$or\":\n            return any(self._doc_matches(doc, k, v) for k, v in value.items())\n        elif key == \"$not\":\n            if isinstance(value, dict):\n                return all(self._doc_matches(doc, k, v) for k, v in value.items())\n            else:\n                raise Exception(\"Invalid $not query.\")\n        elif key in self.meta:\n            return doc[key].matches(value)\n        else:\n            raise Exception(\"Invalid key: \" + key)\n\n    def to_yaml(self, path_or_buf : str):\n        \"\"\"Write the corpus to a yaml file.\n\n        Args:\n            path_or_buf: str\n                The path to the yaml file or a buffer.\n\n        \"\"\"\n        if self.corpus:\n            teangadb.write_corpus_to_yaml_file(path_or_buf, self.corpus)\n        else:\n            if isinstance(path_or_buf, str):\n                with open(path_or_buf, \"w\") as f:\n                    self._to_pretty_yaml(f)\n            else:\n                self._to_pretty_yaml(path_or_buf)\n\n    def to_yaml_str(self) -&gt; str:\n        \"\"\"\n        Write the corpus to a yaml string.\n\n        Examples:\n            &gt;&gt;&gt; corpus = Corpus()\n            &gt;&gt;&gt; corpus.add_layer_meta(\"text\")\n            &gt;&gt;&gt; doc = corpus.add_doc(\"This is a document.\")\n            &gt;&gt;&gt; corpus.to_yaml_str()\n            '_meta:\\\\n    text:\\\\n        type: characters\\\\n\\\n    Kjco:\\\\n    text: This is a document.\\\\n'\n        \"\"\"\n        if self.corpus:\n            return teangadb.write_corpus_to_yaml_string(self.corpus)\n        else:\n            s = StringIO()\n            self._to_pretty_yaml(s)\n            return s.getvalue()\n\n    def _to_pretty_yaml(self, writer):\n        \"\"\"\n        \"\"\"\n        writer.write(\"_meta:\\n\")\n        for name in sorted(self.meta.keys()):\n            meta = self.meta[name]\n            writer.write(\"    \" + name + \":\\n\")\n            writer.write(\"        type: \" + meta.layer_type + \"\\n\")\n            if meta.base:\n                writer.write(\"        base: \" + _yaml_str(meta.base))\n            if meta.data:\n                writer.write(\"        data: \" + \n                             self._dump_yaml_json(meta.data))\n            if meta.link_types:\n                writer.write(\"        link_types: \" + \n                             self._dump_yaml_json(meta.link_types))\n            if meta.target:\n                writer.write(\"        target: \" + \n                             self._dump_yaml_json(meta.target))\n            if meta.default:\n                writer.write(\"        default: \" + \n                             self._dump_yaml_json(meta.default))\n        for id, doc in self._docs:\n            writer.write(id + \":\\n\")\n            for layer_id in sorted(doc.layers):\n                writer.write(\"    \")\n                if isinstance(doc[layer_id].raw, str):\n                    writer.write(layer_id)\n                    writer.write(\": \")\n                    writer.write(_yaml_str(doc[layer_id].raw))\n                else:\n                    writer.write(layer_id + \": \")\n                    writer.write(json.dumps(doc[layer_id].raw) + \"\\n\")\n\n    def _dump_yaml_json(self, obj):\n        \"\"\"\n        \"\"\"\n        if obj is None:\n            return \"null\"\n        elif isinstance(obj, str):\n            return _yaml_str(obj)\n        else:\n            return json.dumps(obj) + \"\\n\"\n\n    def to_json(self, path_or_buf):\n        \"\"\"Write the corpus to a JSON file.\n\n        Args:\n            path_or_buf: str\n                The path to the json file or a buffer.\n\n        \"\"\"\n        if self.corpus:\n            teangadb.write_corpus_to_json_file(path_or_buf, self.corpus)\n        else:\n            if isinstance(path_or_buf, str):\n                with open(path_or_buf, \"w\") as f:\n                    self._to_json(f)\n            else:\n                self._to_json(path_or_buf)\n\n    def to_json_str(self) -&gt; str:\n        \"\"\"\n        Write the corpus to a JSON string.\n\n        Examples:\n            &gt;&gt;&gt; corpus = Corpus()\n            &gt;&gt;&gt; corpus.add_layer_meta(\"text\")\n            &gt;&gt;&gt; doc = corpus.add_doc(\"This is a document.\")\n            &gt;&gt;&gt; corpus.to_json_str()\n            '{\"_meta\": {\"text\": {\"type\": \"characters\"}}, \"_order\": [\"Kjco\"], \\\n    \"Kjco\": {\"text\": \"This is a document.\"}}'\n         \"\"\"\n        if self.corpus:\n            return teangadb.write_corpus_to_json_string(self.corpus)\n        else:\n            s = StringIO()\n            self._to_json(s)\n            return s.getvalue()\n\n    def _to_json(self, writer):\n        dct = {}\n        dct[\"_meta\"] = {name: _from_layer_desc(data) \n                        for name, data in self.meta.items()\n                        if not name.startswith(\"_\")}\n        dct[\"_order\"] = self.doc_ids\n        for doc_id, doc in self._docs:\n            dct[doc_id] = {layer_id: doc[layer_id].raw \n                           for layer_id in doc.layers}\n        json.dump(dct, writer)\n\n    def apply(self, service : Service):\n        \"\"\"Apply a service to each document in the corpus.\n\n        Args:\n            service: The service to apply.\n\n        Examples:\n            &gt;&gt;&gt; corpus = Corpus()\n            &gt;&gt;&gt; corpus.add_layer_meta(\"text\")\n            &gt;&gt;&gt; corpus.add_layer_meta(\"first_char\")\n            &gt;&gt;&gt; doc = corpus.add_doc(text=\"This is a document.\")\n            &gt;&gt;&gt; from teanga.service import Service   \n            &gt;&gt;&gt; class FirstCharService(Service):\n            ...     def requires(self):\n            ...         return {\"text\": { \"type\": \"characters\"}}\n            ...     def produces(self):\n            ...         return {\"first_char\": {\"type\": \"characters\"}}\n            ...     def execute(self, input):\n            ...         input[\"first_char\"] = input[\"text\"][0]\n            ...         return input\n            &gt;&gt;&gt; corpus.apply(FirstCharService())\n        \"\"\"\n        self.add_meta_from_service(service)\n        for _, doc in self.docs:\n            service.execute(doc)\n\n\n    def lower(self) -&gt; TransformedCorpus:\n        \"\"\"Lowercase all the text in the corpus.\n\n        Examples:\n            &gt;&gt;&gt; corpus = Corpus()\n            &gt;&gt;&gt; corpus.add_layer_meta(\"text\")\n            &gt;&gt;&gt; doc = corpus.add_doc(\"This is a document.\")\n            &gt;&gt;&gt; corpus = corpus.lower()\n            &gt;&gt;&gt; list(corpus.docs)\n            [('Kjco', Document('Kjco', {'text': CharacterLayer('this is a document.')}))]\n        \"\"\"\n        text_layers = [layer for layer in self.meta \n                       if self.meta[layer].layer_type == \"characters\"]\n        return TransformedCorpus(self, {layer: lambda x: x.lower() \n                                        for layer in text_layers})\n\n    def upper(self) -&gt; TransformedCorpus:\n        \"\"\"Uppercase all the text in the corpus.\n\n        Examples:\n            &gt;&gt;&gt; corpus = Corpus()\n            &gt;&gt;&gt; corpus.add_layer_meta(\"text\")\n            &gt;&gt;&gt; doc = corpus.add_doc(\"This is a document.\")\n            &gt;&gt;&gt; corpus = corpus.upper()\n            &gt;&gt;&gt; list(corpus.docs)\n            [('Kjco', Document('Kjco', {'text': CharacterLayer('THIS IS A DOCUMENT.')}))]\n        \"\"\"\n        text_layers = [layer for layer in self.meta \n                       if self.meta[layer].layer_type == \"characters\"]\n        return TransformedCorpus(self, {layer: lambda x: x.upper()\n                                        for layer in text_layers})\n\n    def transform(self, layer: str, transform: \n                  Callable[[str], str]) -&gt; TransformedCorpus:\n        \"\"\"Transform a layer in the corpus.\n\n        Args:\n            layer: str\n                The name of the layer to transform.\n            transform: Callable[[str], str]\n                The transformation function.\n\n        Examples:\n            &gt;&gt;&gt; corpus = Corpus()\n            &gt;&gt;&gt; corpus.add_layer_meta(\"text\")\n            &gt;&gt;&gt; doc = corpus.add_doc(\"This is a document.\")\n            &gt;&gt;&gt; corpus = corpus.transform(\"text\", lambda x: x[:10])\n            &gt;&gt;&gt; list(corpus.docs)\n            [('Kjco', Document('Kjco', {'text': CharacterLayer('This is a ')}))]\n        \"\"\"\n        return TransformedCorpus(self, {layer: transform})\n</code></pre>"},{"location":"reference/reference-corpus/#teanga.corpus.Corpus.doc_ids","title":"<code>doc_ids: list[str]</code>  <code>property</code>","text":"<p>Return the document ids of the corpus.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; corpus = Corpus()\n&gt;&gt;&gt; corpus.add_layer_meta(\"text\")\n&gt;&gt;&gt; doc = corpus.add_doc(\"This is a document.\")\n&gt;&gt;&gt; corpus.doc_ids\n['Kjco']\n</code></pre>"},{"location":"reference/reference-corpus/#teanga.corpus.Corpus.docs","title":"<code>docs: Iterator[tuple[str, Document]]</code>  <code>property</code>","text":"<p>Get all the documents in the corpus</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; corpus = Corpus()\n&gt;&gt;&gt; corpus.add_layer_meta(\"text\")\n&gt;&gt;&gt; doc = corpus.add_doc(\"This is a document.\")\n&gt;&gt;&gt; list(corpus.docs)\n[('Kjco', Document('Kjco', {'text': CharacterLayer('This is a document.')}))]\n</code></pre>"},{"location":"reference/reference-corpus/#teanga.corpus.Corpus.meta","title":"<code>meta: dict[str, LayerDesc]</code>  <code>property</code> <code>writable</code>","text":"<p>Return the meta data of the corpus.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; corpus = Corpus()\n&gt;&gt;&gt; corpus.add_layer_meta(\"text\")\n&gt;&gt;&gt; corpus.meta\n{'text': LayerDesc(layer_type='characters', base=None, data=None,     link_types=None, target=None, default=None, meta={})}\n</code></pre>"},{"location":"reference/reference-corpus/#teanga.corpus.Corpus.add_doc","title":"<code>add_doc(*args, **kwargs)</code>","text":"<p>Add a document to the corpus.</p> <p>Args:</p> <pre><code>If the corpus has only a single layer, the document can be added as a\nstring. If the corpus has multiple layers, the document must be added\nby specifying the names of the layers and the data for each layer as\nkeyword arguments.\n</code></pre> <p>Examples:</p> <pre><code>&gt;&gt;&gt; corpus = Corpus()\n&gt;&gt;&gt; corpus.add_layer_meta(\"text\")\n&gt;&gt;&gt; doc = corpus.add_doc(\"This is a document.\")\n</code></pre> <pre><code>&gt;&gt;&gt; corpus = Corpus()\n&gt;&gt;&gt; corpus.add_layer_meta(\"en\", layer_type=\"characters\")\n&gt;&gt;&gt; corpus.add_layer_meta(\"nl\", layer_type=\"characters\")\n&gt;&gt;&gt; doc = corpus.add_doc(en=\"This is a document.\", nl=\"Dit is een document.\")\n</code></pre> Source code in <code>teanga/corpus.py</code> <pre><code>def add_doc(self, *args, **kwargs) -&gt; Document:\n    \"\"\"Add a document to the corpus.\n\n    Args:\n\n        If the corpus has only a single layer, the document can be added as a\n        string. If the corpus has multiple layers, the document must be added\n        by specifying the names of the layers and the data for each layer as\n        keyword arguments.\n\n    Examples:\n        &gt;&gt;&gt; corpus = Corpus()\n        &gt;&gt;&gt; corpus.add_layer_meta(\"text\")\n        &gt;&gt;&gt; doc = corpus.add_doc(\"This is a document.\")\n\n        &gt;&gt;&gt; corpus = Corpus()\n        &gt;&gt;&gt; corpus.add_layer_meta(\"en\", layer_type=\"characters\")\n        &gt;&gt;&gt; corpus.add_layer_meta(\"nl\", layer_type=\"characters\")\n        &gt;&gt;&gt; doc = corpus.add_doc(en=\"This is a document.\", nl=\"Dit is een document.\")\n\n    \"\"\"\n    char_layers = [name for (name, layer) in self.meta.items()\n                   if layer.layer_type == \"characters\"]\n    if len(char_layers) == 0:\n        raise Exception(\"No character layer found. \" +\n        \"Please add at least one character layer.\")\n    elif len(char_layers) == 1:\n        if len(args) == 1:\n            doc_id = teanga_id_for_doc(self.doc_ids,\n                    **{char_layers[0]: args[0]})\n            doc = Document(self.meta, id=doc_id, **{char_layers[0]: args[0]})\n            if self.corpus:\n                self.corpus.add_doc({ char_layers[0]: args[0] })\n                doc.corpus = self.corpus\n            else:\n                self._docs.append((doc_id, doc))\n            return doc\n        elif len(kwargs) == 1 and list(kwargs.keys())[0] == char_layers[0]:\n            doc_id = teanga_id_for_doc(self.doc_ids,\n                                       **kwargs)\n            doc = Document(self.meta, id=doc_id, **kwargs)\n            if self.corpus:\n                self.corpus.add_doc(**kwargs)\n                doc.corpus = self.corpus\n            else:\n                self._docs.append((doc_id, doc))\n            return doc\n        else:\n            raise Exception(\"Invalid arguments, please specify the text \" +\n                            \"or use correct layer names.\")\n    else:\n        if len(kwargs.keys()) == 0:\n            raise Exception(\"More than one character layer found \" +\n                            f\"{' '.join(char_layers)} \" +\n                            \"Please specify the layer names to add\")\n        if set(kwargs.keys()).issubset(set(char_layers)):\n            doc_id = teanga_id_for_doc(self.doc_ids,\n                                       **kwargs)\n            doc = Document(self.meta, id=doc_id, **kwargs)\n            if self.corpus:\n                self.corpus.add_doc(kwargs)\n                doc.corpus = self.corpus\n            else:\n                self._docs.append((doc_id, doc))\n            return doc\n        else:\n            raise Exception(\"Invalid arguments, please specify the text \" +\n                            \"or use correct layer names.\")\n</code></pre>"},{"location":"reference/reference-corpus/#teanga.corpus.Corpus.add_layer_meta","title":"<code>add_layer_meta(name=None, layer_type='characters', base=None, data=None, link_types=None, target=None, default=None, meta={})</code>","text":"<p>Add a layer to the corpus.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>str Name of the layer.</p> <code>None</code> <code>layer_type</code> <code>str</code> <p>str The type of the layer, can be \"characters\", \"span\", \"seq\",  \"element\" or \"div\".</p> <code>'characters'</code> <code>base</code> <code>str</code> <p>str The name of the layer on which the new layer is based.</p> <code>None</code> <code>data</code> <p>list The data of the layer, this can be the value \"string\", \"link\" or  a list of strings, for an enumeration of values</p> <code>None</code> <code>link_types</code> <code>list[str]</code> <p>list The types of the links, if the data is links.</p> <code>None</code> <code>target</code> <code>str</code> <p>str The name of the target layer, if the data is links.</p> <code>None</code> <code>default</code> <p>A default value if none is given</p> <code>None</code> <code>meta</code> <code>dict</code> <p>dict Metadata properties of the layer.</p> <code>{}</code> Source code in <code>teanga/corpus.py</code> <pre><code>def add_layer_meta(self, name:str=None,\n                   layer_type:str=\"characters\", base:str=None, \n                   data=None, link_types:list[str]=None,\n                   target:str=None, default=None,\n                   meta:dict={}):\n    \"\"\"Add a layer to the corpus.\n\n    Args:\n        name: str\n            Name of the layer.\n        layer_type: str\n            The type of the layer, can be \"characters\", \"span\", \"seq\", \n            \"element\" or \"div\".\n        base: str\n            The name of the layer on which the new layer is based.\n        data: list\n            The data of the layer, this can be the value \"string\", \"link\" or \n            a list of strings, for an enumeration of values\n        link_types: list\n            The types of the links, if the data is links.\n        target: str\n            The name of the target layer, if the data is links.\n        default:\n            A default value if none is given\n        meta: dict\n            Metadata properties of the layer.\n    \"\"\"\n    if self.corpus:\n        self.corpus.add_layer_meta(\n                name, layer_type, {}, base, data, link_types, target, default)\n        return\n    if name is None:\n        raise Exception(\"Name of the layer is not specified.\")\n    if name in self.meta:\n        raise Exception(\"Layer with name \" + name + \" already exists.\")\n    if layer_type not in [\"characters\", \"span\", \"seq\", \"div\", \"element\"]:\n        raise Exception(\"Type of the layer is not valid.\")\n    if layer_type == \"characters\" and base is not None and base != \"\":\n        raise Exception(\"Layer of type characters cannot be based on\" +\n        \" another layer.\")\n    if layer_type == \"characters\":\n        self.meta[name] = LayerDesc(\"characters\")\n        return\n    if base is None:\n        raise Exception(\"Layer of type \" + layer_type + \" must be based on \" +\n        \"another layer.\")\n    self.meta[name] = LayerDesc(layer_type, base, data, link_types, \n                                target, default, meta)\n</code></pre>"},{"location":"reference/reference-corpus/#teanga.corpus.Corpus.add_meta_from_service","title":"<code>add_meta_from_service(service)</code>","text":"<p>Add the meta data of a service to the corpus. This is normally  required to call apply to a service</p> <p>Parameters:</p> Name Type Description Default <code>service</code> <code>Service</code> <p>The service to add.</p> required <p>Examples:</p> <pre><code>&gt;&gt;&gt; corpus = Corpus()\n&gt;&gt;&gt; class ExampleService:\n...     def requires(self):\n...         return {\"text\": {\"type\": \"characters\"}}\n...     def produces(self):\n...         return {\"first_char\": {\"type\": \"characters\"}}\n&gt;&gt;&gt; corpus.add_meta_from_service(ExampleService())\n</code></pre> <p>Returns:</p> Type Description <p>A number representing the arithmetic sum of <code>a</code> and <code>b</code>.</p> Source code in <code>teanga/corpus.py</code> <pre><code>def add_meta_from_service(self, service : Service):\n    \"\"\"Add the meta data of a service to the corpus. This is normally \n    required to call apply to a service\n\n    Args:\n        service: The service to add.\n\n    Examples:\n        &gt;&gt;&gt; corpus = Corpus()\n        &gt;&gt;&gt; class ExampleService:\n        ...     def requires(self):\n        ...         return {\"text\": {\"type\": \"characters\"}}\n        ...     def produces(self):\n        ...         return {\"first_char\": {\"type\": \"characters\"}}\n        &gt;&gt;&gt; corpus.add_meta_from_service(ExampleService())\n\n    Returns:\n        A number representing the arithmetic sum of `a` and `b`.\n    \"\"\"\n    for name, layer in chain(service.requires().items(), \n                             service.produces().items()):\n        if \"type\" not in layer:\n            raise Exception(\"Layer type not specified.\" + str(layer))\n        desc = _layer_desc_from_kwargs(layer)\n        if name in self.meta and self.meta[name] != desc:\n            raise Exception(\"Layer with name \" + name +\n                            \" already exists with different meta.\")\n        elif name not in self.meta:\n            self.add_layer_meta(name, **layer)\n</code></pre>"},{"location":"reference/reference-corpus/#teanga.corpus.Corpus.apply","title":"<code>apply(service)</code>","text":"<p>Apply a service to each document in the corpus.</p> <p>Parameters:</p> Name Type Description Default <code>service</code> <code>Service</code> <p>The service to apply.</p> required <p>Examples:</p> <pre><code>&gt;&gt;&gt; corpus = Corpus()\n&gt;&gt;&gt; corpus.add_layer_meta(\"text\")\n&gt;&gt;&gt; corpus.add_layer_meta(\"first_char\")\n&gt;&gt;&gt; doc = corpus.add_doc(text=\"This is a document.\")\n&gt;&gt;&gt; from teanga.service import Service   \n&gt;&gt;&gt; class FirstCharService(Service):\n...     def requires(self):\n...         return {\"text\": { \"type\": \"characters\"}}\n...     def produces(self):\n...         return {\"first_char\": {\"type\": \"characters\"}}\n...     def execute(self, input):\n...         input[\"first_char\"] = input[\"text\"][0]\n...         return input\n&gt;&gt;&gt; corpus.apply(FirstCharService())\n</code></pre> Source code in <code>teanga/corpus.py</code> <pre><code>def apply(self, service : Service):\n    \"\"\"Apply a service to each document in the corpus.\n\n    Args:\n        service: The service to apply.\n\n    Examples:\n        &gt;&gt;&gt; corpus = Corpus()\n        &gt;&gt;&gt; corpus.add_layer_meta(\"text\")\n        &gt;&gt;&gt; corpus.add_layer_meta(\"first_char\")\n        &gt;&gt;&gt; doc = corpus.add_doc(text=\"This is a document.\")\n        &gt;&gt;&gt; from teanga.service import Service   \n        &gt;&gt;&gt; class FirstCharService(Service):\n        ...     def requires(self):\n        ...         return {\"text\": { \"type\": \"characters\"}}\n        ...     def produces(self):\n        ...         return {\"first_char\": {\"type\": \"characters\"}}\n        ...     def execute(self, input):\n        ...         input[\"first_char\"] = input[\"text\"][0]\n        ...         return input\n        &gt;&gt;&gt; corpus.apply(FirstCharService())\n    \"\"\"\n    self.add_meta_from_service(service)\n    for _, doc in self.docs:\n        service.execute(doc)\n</code></pre>"},{"location":"reference/reference-corpus/#teanga.corpus.Corpus.by","title":"<code>by(layer)</code>","text":"<p>Group the corpus according to which documents have specific values of a layer. Mostly used for metadata layers (e.g., \"author\", \"genre\")</p> Source code in <code>teanga/corpus.py</code> <pre><code>def by(self, layer:str) -&gt; GroupedCorpus:\n    \"\"\"Group the corpus according to which documents have specific values\n    of a layer. Mostly used for metadata layers (e.g., \"author\", \"genre\")\n    \"\"\"\n    grouping = defaultdict(list)\n    for doc_id, doc in self.docs:\n        if layer in doc:\n            for value in doc[layer].data:\n                grouping[value].append(doc_id)\n    return GroupedCorpus(self, grouping)\n</code></pre>"},{"location":"reference/reference-corpus/#teanga.corpus.Corpus.by_doc","title":"<code>by_doc()</code>","text":"<p>Group the corpus by document to enable analysis such as frequency analysis on a per document basis.</p> Source code in <code>teanga/corpus.py</code> <pre><code>def by_doc(self) -&gt; GroupedCorpus:\n    \"\"\"Group the corpus by document to enable analysis such as frequency\n    analysis on a per document basis.\n    \"\"\"\n    return GroupedCorpus(self, \n                         {doc_id: [doc_id] for doc_id in self.doc_ids})\n</code></pre>"},{"location":"reference/reference-corpus/#teanga.corpus.Corpus.doc_by_id","title":"<code>doc_by_id(doc_id)</code>","text":"<p>Get a document by its id.</p> <p>Parameters:</p> Name Type Description Default <code>doc_id</code> <code>str</code> <p>str The id of the document.</p> required <p>Examples:</p> <pre><code>&gt;&gt;&gt; corpus = Corpus()\n&gt;&gt;&gt; corpus.add_layer_meta(\"text\")\n&gt;&gt;&gt; doc = corpus.add_doc(\"This is a document.\")\n&gt;&gt;&gt; corpus.doc_by_id(\"Kjco\")\nDocument('Kjco', {'text': CharacterLayer('This is a document.')})\n</code></pre> <pre><code>&gt;&gt;&gt; if TEANGA_DB:\n...   corpus = Corpus(\"tmp\",new=True)\n...   corpus.add_layer_meta(\"text\")\n...   doc = corpus.add_doc(\"This is a document.\")\n</code></pre> Source code in <code>teanga/corpus.py</code> <pre><code>def doc_by_id(self, doc_id:str) -&gt; Document:\n    \"\"\"\n    Get a document by its id.\n\n    Args:\n        doc_id: str\n            The id of the document.\n\n    Examples:\n        &gt;&gt;&gt; corpus = Corpus()\n        &gt;&gt;&gt; corpus.add_layer_meta(\"text\")\n        &gt;&gt;&gt; doc = corpus.add_doc(\"This is a document.\")\n        &gt;&gt;&gt; corpus.doc_by_id(\"Kjco\")\n        Document('Kjco', {'text': CharacterLayer('This is a document.')})\n\n        &gt;&gt;&gt; if TEANGA_DB:\n        ...   corpus = Corpus(\"tmp\",new=True)\n        ...   corpus.add_layer_meta(\"text\")\n        ...   doc = corpus.add_doc(\"This is a document.\")\n\n    \"\"\"\n    if self.corpus:\n        return Document(self.meta, id=doc_id, corpus=self.corpus,\n                        **self.corpus.get_doc_by_id(doc_id))\n    else:\n        for doc in self._docs:\n            if doc[0] == doc_id:\n                return doc[1]\n        raise Exception(\"Document with id \" + doc_id + \" not found.\")\n</code></pre>"},{"location":"reference/reference-corpus/#teanga.corpus.Corpus.lower","title":"<code>lower()</code>","text":"<p>Lowercase all the text in the corpus.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; corpus = Corpus()\n&gt;&gt;&gt; corpus.add_layer_meta(\"text\")\n&gt;&gt;&gt; doc = corpus.add_doc(\"This is a document.\")\n&gt;&gt;&gt; corpus = corpus.lower()\n&gt;&gt;&gt; list(corpus.docs)\n[('Kjco', Document('Kjco', {'text': CharacterLayer('this is a document.')}))]\n</code></pre> Source code in <code>teanga/corpus.py</code> <pre><code>def lower(self) -&gt; TransformedCorpus:\n    \"\"\"Lowercase all the text in the corpus.\n\n    Examples:\n        &gt;&gt;&gt; corpus = Corpus()\n        &gt;&gt;&gt; corpus.add_layer_meta(\"text\")\n        &gt;&gt;&gt; doc = corpus.add_doc(\"This is a document.\")\n        &gt;&gt;&gt; corpus = corpus.lower()\n        &gt;&gt;&gt; list(corpus.docs)\n        [('Kjco', Document('Kjco', {'text': CharacterLayer('this is a document.')}))]\n    \"\"\"\n    text_layers = [layer for layer in self.meta \n                   if self.meta[layer].layer_type == \"characters\"]\n    return TransformedCorpus(self, {layer: lambda x: x.lower() \n                                    for layer in text_layers})\n</code></pre>"},{"location":"reference/reference-corpus/#teanga.corpus.Corpus.normalise_query","title":"<code>normalise_query(query)</code>","text":"<p>Normalise a query by replacing all field values with either <code>$eq</code> or  <code>$text</code></p> Source code in <code>teanga/corpus.py</code> <pre><code>def normalise_query(self, query):\n    \"\"\"Normalise a query by replacing all field values with either `$eq` or \n    `$text`\n    \"\"\"\n    q2 = {}\n    for key, value in query.items():\n        if isinstance(value, list):\n            if all(isinstance(v, str) for v in value):\n                if key in self.meta and self.meta[key].data is None:\n                    q2[key] = {\"$text_in\": value}\n                else:\n                    q2[key] = {\"$in\": value}\n        elif isinstance(value, dict):\n            q2[key] = value\n        elif key in self.meta and self.meta[key].data is None:\n            q2[key] = {\"$text\": value}\n        else:\n            q2[key] = {\"$eq\": value}\n    return q2\n</code></pre>"},{"location":"reference/reference-corpus/#teanga.corpus.Corpus.search","title":"<code>search(query=None, **kwargs)</code>","text":"<p>Search for documents in the corpus.</p> <p>Parameters:</p> Name Type Description Default <code>kwargs,</code> <code>query</code> <p>The search criteria. The keys are the layer names and the values can be either a string, a list of strings or a dictionary with values describing the search criteria.</p> <p>If the value is a string the search is interpreted as an exact  match. If the layer has no data this is applied to the text  otherwise it is applied to the data.</p> <p>If the value is a list of strings, the search is interpreted as a search for any of the strings in the list.</p> <p>For dictionaries, the following keys are supported: <code>$text</code>: The value on the base character layer equal this value. <code>$text_ne</code>: The value on the base character layer must not equal this value. <code>$eq</code>: The value must be equal to this value. <code>$ne</code>: The value must not be equal to this value. <code>$gt</code>: The value must be greater than this value. <code>$lt</code>: The value must be less than this value. <code>$gte</code>: The value must be greater than or equal to this value. <code>$lte</code>: The value must be less than or equal to this value. <code>$in</code>: The value must be in this list. <code>$nin</code>: The value must not be in this list. <code>$text_in</code>: The value on the base character layer must be in this list. <code>$text_nin</code>: The value on the base character layer must not be in this list. <code>$regex</code>: The value must match this regular expression. <code>$text_regex</code>: The value on the base character layer must match      this regular expression. <code>$and</code>: All the conditions in this list must be true. <code>$or</code>: At least one of the conditions in this list must be true. <code>$not</code>: The condition in this list must not be true. <code>$exists</code>: A particular layer must exist.</p> required <p>Returns:</p> Type Description <code>Iterator[str]</code> <p>An iterator over the document ids that match the search criteria.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; corpus = Corpus()\n&gt;&gt;&gt; corpus.add_layer_meta(\"text\")\n&gt;&gt;&gt; corpus.add_layer_meta(\"words\", layer_type=\"span\", base=\"text\")\n&gt;&gt;&gt; corpus.add_layer_meta(\"pos\", layer_type=\"seq\", base=\"words\",\n...                        data=[\"NOUN\", \"VERB\", \"ADJ\"])\n&gt;&gt;&gt; corpus.add_layer_meta(\"lemma\", layer_type=\"seq\", base=\"words\",\n...                        data=\"string\")\n&gt;&gt;&gt; doc = corpus.add_doc(\"Colorless green ideas sleep furiously.\")\n&gt;&gt;&gt; doc.words = [(0, 9), (10, 15), (16, 21), (22, 27), (28, 37)]\n&gt;&gt;&gt; doc.pos = [\"ADJ\", \"ADJ\", \"NOUN\", \"VERB\", \"ADV\"]\n&gt;&gt;&gt; doc.lemma = [\"colorless\", \"green\", \"idea\", \"sleep\", \"furiously\"]\n&gt;&gt;&gt; list(corpus.search(pos=\"NOUN\"))\n['9wpe']\n&gt;&gt;&gt; list(corpus.search(pos=[\"NOUN\", \"VERB\"]))\n['9wpe']\n&gt;&gt;&gt; list(corpus.search(pos={\"$in\": [\"NOUN\", \"VERB\"]}))\n['9wpe']\n&gt;&gt;&gt; list(corpus.search(pos={\"$regex\": \"N.*\"}))\n['9wpe']\n&gt;&gt;&gt; list(corpus.search(pos=\"VERB\", lemma=\"sleep\"))\n['9wpe']\n&gt;&gt;&gt; list(corpus.search(pos=\"VERB\", words=\"idea\"))\n[]\n&gt;&gt;&gt; list(corpus.search(pos=\"VERB\", words=\"ideas\"))\n['9wpe']\n&gt;&gt;&gt; list(corpus.search({\"pos\": \"VERB\", \"lemma\": \"sleep\"}))\n['9wpe']\n&gt;&gt;&gt; list(corpus.search({\"$and\": {\"pos\": \"VERB\", \"lemma\": \"sleep\"}}))\n['9wpe']\n</code></pre> Source code in <code>teanga/corpus.py</code> <pre><code>def search(self, query=None, **kwargs) -&gt; Iterator[str]:\n    \"\"\"Search for documents in the corpus.\n\n    Args:\n        kwargs, query:\n            The search criteria. The keys are the layer names and the values\n            can be either a string, a list of strings or a dictionary with values\n            describing the search criteria.\n\n            If the value is a string the search is interpreted as an exact \n            match. If the layer has no data this is applied to the text \n            otherwise it is applied to the data.\n\n            If the value is a list of strings, the search is interpreted as a\n            search for any of the strings in the list.\n\n            For dictionaries, the following keys are supported:\n            `$text`: The value on the base character layer equal this value.\n            `$text_ne`: The value on the base character layer must not equal this value.\n            `$eq`: The value must be equal to this value.\n            `$ne`: The value must not be equal to this value.\n            `$gt`: The value must be greater than this value.\n            `$lt`: The value must be less than this value.\n            `$gte`: The value must be greater than or equal to this value.\n            `$lte`: The value must be less than or equal to this value.\n            `$in`: The value must be in this list.\n            `$nin`: The value must not be in this list.\n            `$text_in`: The value on the base character layer must be in this list.\n            `$text_nin`: The value on the base character layer must not be in this list.\n            `$regex`: The value must match this regular expression.\n            `$text_regex`: The value on the base character layer must match \n                this regular expression.\n            `$and`: All the conditions in this list must be true.\n            `$or`: At least one of the conditions in this list must be true.\n            `$not`: The condition in this list must not be true.\n            `$exists`: A particular layer must exist.\n\n    Returns:\n        An iterator over the document ids that match the search criteria.\n\n    Examples:\n        &gt;&gt;&gt; corpus = Corpus()\n        &gt;&gt;&gt; corpus.add_layer_meta(\"text\")\n        &gt;&gt;&gt; corpus.add_layer_meta(\"words\", layer_type=\"span\", base=\"text\")\n        &gt;&gt;&gt; corpus.add_layer_meta(\"pos\", layer_type=\"seq\", base=\"words\",\n        ...                        data=[\"NOUN\", \"VERB\", \"ADJ\"])\n        &gt;&gt;&gt; corpus.add_layer_meta(\"lemma\", layer_type=\"seq\", base=\"words\",\n        ...                        data=\"string\")\n        &gt;&gt;&gt; doc = corpus.add_doc(\"Colorless green ideas sleep furiously.\")\n        &gt;&gt;&gt; doc.words = [(0, 9), (10, 15), (16, 21), (22, 27), (28, 37)]\n        &gt;&gt;&gt; doc.pos = [\"ADJ\", \"ADJ\", \"NOUN\", \"VERB\", \"ADV\"]\n        &gt;&gt;&gt; doc.lemma = [\"colorless\", \"green\", \"idea\", \"sleep\", \"furiously\"]\n        &gt;&gt;&gt; list(corpus.search(pos=\"NOUN\"))\n        ['9wpe']\n        &gt;&gt;&gt; list(corpus.search(pos=[\"NOUN\", \"VERB\"]))\n        ['9wpe']\n        &gt;&gt;&gt; list(corpus.search(pos={\"$in\": [\"NOUN\", \"VERB\"]}))\n        ['9wpe']\n        &gt;&gt;&gt; list(corpus.search(pos={\"$regex\": \"N.*\"}))\n        ['9wpe']\n        &gt;&gt;&gt; list(corpus.search(pos=\"VERB\", lemma=\"sleep\"))\n        ['9wpe']\n        &gt;&gt;&gt; list(corpus.search(pos=\"VERB\", words=\"idea\"))\n        []\n        &gt;&gt;&gt; list(corpus.search(pos=\"VERB\", words=\"ideas\"))\n        ['9wpe']\n        &gt;&gt;&gt; list(corpus.search({\"pos\": \"VERB\", \"lemma\": \"sleep\"}))\n        ['9wpe']\n        &gt;&gt;&gt; list(corpus.search({\"$and\": {\"pos\": \"VERB\", \"lemma\": \"sleep\"}}))\n        ['9wpe']\n    \"\"\"\n    if kwargs and query:\n        raise Exception(\"Cannot specify both query and kwargs.\")\n    if self.corpus:\n        if kwargs:\n            query = self.normalise_query(kwargs)\n        else:\n            query = self.normalise_query(query)\n        for result in self.corpus.search(query):\n            yield result\n    else:\n        if kwargs:\n            for doc_id, doc in self.docs:\n                if all(next(doc[layer].matches(value), None) \n                       for layer, value in kwargs.items()):\n                    yield doc_id\n        else:\n            for doc_id, doc in self.docs:\n                for key, value in query.items():\n                    if not self._doc_matches(doc, key, value):\n                        break\n                else:\n                    yield doc_id\n</code></pre>"},{"location":"reference/reference-corpus/#teanga.corpus.Corpus.text_freq","title":"<code>text_freq(layer, condition=None)</code>","text":"<p>Get the frequence of a text string in the corpus.</p> <p>Returns:</p> Type Description <code>dict[str, int]</code> <p>A dictionary with the frequency of each string.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; corpus = Corpus()\n&gt;&gt;&gt; corpus.add_layer_meta(\"text\")\n&gt;&gt;&gt; corpus.add_layer_meta(\"words\", layer_type=\"span\", base=\"text\")\n&gt;&gt;&gt; doc = corpus.add_doc(\"This is a document.\")\n&gt;&gt;&gt; doc.words = [(0, 4), (5, 7), (8, 9), (10, 18)]\n&gt;&gt;&gt; corpus.text_freq(\"words\")\nCounter({'This': 1, 'is': 1, 'a': 1, 'document': 1})\n&gt;&gt;&gt; corpus.text_freq(\"words\", lambda x: \"i\" in x)\nCounter({'This': 1, 'is': 1})\n</code></pre> Source code in <code>teanga/corpus.py</code> <pre><code>def text_freq(self, layer:str, \n              condition : Union[str, \n        Callable[[str], bool], list] = None) -&gt; dict[str, int]:\n    \"\"\"Get the frequence of a text string in the corpus.\n\n    Args:\n        layer\n            The layer to get the frequency of (e.g. \"text\")\n        condition\n            A filter to match to. If a single string is given, the frequency\n            of this single word is returned. If a list of strings is given, the \n            frequency of each string is returned. If a function is given, all \n            strings are returned for which the function returns True.\n\n    Returns:\n        A dictionary with the frequency of each string.\n\n    Examples:\n        &gt;&gt;&gt; corpus = Corpus()\n        &gt;&gt;&gt; corpus.add_layer_meta(\"text\")\n        &gt;&gt;&gt; corpus.add_layer_meta(\"words\", layer_type=\"span\", base=\"text\")\n        &gt;&gt;&gt; doc = corpus.add_doc(\"This is a document.\")\n        &gt;&gt;&gt; doc.words = [(0, 4), (5, 7), (8, 9), (10, 18)]\n        &gt;&gt;&gt; corpus.text_freq(\"words\")\n        Counter({'This': 1, 'is': 1, 'a': 1, 'document': 1})\n        &gt;&gt;&gt; corpus.text_freq(\"words\", lambda x: \"i\" in x)\n        Counter({'This': 1, 'is': 1})\n\n    \"\"\"\n    if condition is None:\n        return Counter(word\n            for _, doc in self.docs\n            for word in doc[layer].text)\n    elif isinstance(condition, str):\n        return Counter(word\n            for _, doc in self.docs\n                       for word in doc[layer].text\n                       if word == condition)\n    elif callable(condition):\n        return Counter(word\n            for _, doc in self.docs\n            for word in doc[layer].text\n                       if condition(word))\n    else:\n        return Counter(word\n            for _, doc in self.docs\n            for word in doc[layer].text\n                       if word in condition)\n</code></pre>"},{"location":"reference/reference-corpus/#teanga.corpus.Corpus.to_json","title":"<code>to_json(path_or_buf)</code>","text":"<p>Write the corpus to a JSON file.</p> <p>Parameters:</p> Name Type Description Default <code>path_or_buf</code> <p>str The path to the json file or a buffer.</p> required Source code in <code>teanga/corpus.py</code> <pre><code>def to_json(self, path_or_buf):\n    \"\"\"Write the corpus to a JSON file.\n\n    Args:\n        path_or_buf: str\n            The path to the json file or a buffer.\n\n    \"\"\"\n    if self.corpus:\n        teangadb.write_corpus_to_json_file(path_or_buf, self.corpus)\n    else:\n        if isinstance(path_or_buf, str):\n            with open(path_or_buf, \"w\") as f:\n                self._to_json(f)\n        else:\n            self._to_json(path_or_buf)\n</code></pre>"},{"location":"reference/reference-corpus/#teanga.corpus.Corpus.to_json_str","title":"<code>to_json_str()</code>","text":"<p>Write the corpus to a JSON string.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; corpus = Corpus()\n&gt;&gt;&gt; corpus.add_layer_meta(\"text\")\n&gt;&gt;&gt; doc = corpus.add_doc(\"This is a document.\")\n&gt;&gt;&gt; corpus.to_json_str()\n'{\"_meta\": {\"text\": {\"type\": \"characters\"}}, \"_order\": [\"Kjco\"],     \"Kjco\": {\"text\": \"This is a document.\"}}'\n</code></pre> Source code in <code>teanga/corpus.py</code> <pre><code>def to_json_str(self) -&gt; str:\n    \"\"\"\n    Write the corpus to a JSON string.\n\n    Examples:\n        &gt;&gt;&gt; corpus = Corpus()\n        &gt;&gt;&gt; corpus.add_layer_meta(\"text\")\n        &gt;&gt;&gt; doc = corpus.add_doc(\"This is a document.\")\n        &gt;&gt;&gt; corpus.to_json_str()\n        '{\"_meta\": {\"text\": {\"type\": \"characters\"}}, \"_order\": [\"Kjco\"], \\\n\"Kjco\": {\"text\": \"This is a document.\"}}'\n     \"\"\"\n    if self.corpus:\n        return teangadb.write_corpus_to_json_string(self.corpus)\n    else:\n        s = StringIO()\n        self._to_json(s)\n        return s.getvalue()\n</code></pre>"},{"location":"reference/reference-corpus/#teanga.corpus.Corpus.to_yaml","title":"<code>to_yaml(path_or_buf)</code>","text":"<p>Write the corpus to a yaml file.</p> <p>Parameters:</p> Name Type Description Default <code>path_or_buf</code> <code>str</code> <p>str The path to the yaml file or a buffer.</p> required Source code in <code>teanga/corpus.py</code> <pre><code>def to_yaml(self, path_or_buf : str):\n    \"\"\"Write the corpus to a yaml file.\n\n    Args:\n        path_or_buf: str\n            The path to the yaml file or a buffer.\n\n    \"\"\"\n    if self.corpus:\n        teangadb.write_corpus_to_yaml_file(path_or_buf, self.corpus)\n    else:\n        if isinstance(path_or_buf, str):\n            with open(path_or_buf, \"w\") as f:\n                self._to_pretty_yaml(f)\n        else:\n            self._to_pretty_yaml(path_or_buf)\n</code></pre>"},{"location":"reference/reference-corpus/#teanga.corpus.Corpus.to_yaml_str","title":"<code>to_yaml_str()</code>","text":"<p>Write the corpus to a yaml string.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; corpus = Corpus()\n&gt;&gt;&gt; corpus.add_layer_meta(\"text\")\n&gt;&gt;&gt; doc = corpus.add_doc(\"This is a document.\")\n&gt;&gt;&gt; corpus.to_yaml_str()\n'_meta:\\n    text:\\n        type: characters\\n    Kjco:\\n    text: This is a document.\\n'\n</code></pre> Source code in <code>teanga/corpus.py</code> <pre><code>def to_yaml_str(self) -&gt; str:\n    \"\"\"\n    Write the corpus to a yaml string.\n\n    Examples:\n        &gt;&gt;&gt; corpus = Corpus()\n        &gt;&gt;&gt; corpus.add_layer_meta(\"text\")\n        &gt;&gt;&gt; doc = corpus.add_doc(\"This is a document.\")\n        &gt;&gt;&gt; corpus.to_yaml_str()\n        '_meta:\\\\n    text:\\\\n        type: characters\\\\n\\\nKjco:\\\\n    text: This is a document.\\\\n'\n    \"\"\"\n    if self.corpus:\n        return teangadb.write_corpus_to_yaml_string(self.corpus)\n    else:\n        s = StringIO()\n        self._to_pretty_yaml(s)\n        return s.getvalue()\n</code></pre>"},{"location":"reference/reference-corpus/#teanga.corpus.Corpus.transform","title":"<code>transform(layer, transform)</code>","text":"<p>Transform a layer in the corpus.</p> <p>Parameters:</p> Name Type Description Default <code>layer</code> <code>str</code> <p>str The name of the layer to transform.</p> required <code>transform</code> <code>Callable[[str], str]</code> <p>Callable[[str], str] The transformation function.</p> required <p>Examples:</p> <pre><code>&gt;&gt;&gt; corpus = Corpus()\n&gt;&gt;&gt; corpus.add_layer_meta(\"text\")\n&gt;&gt;&gt; doc = corpus.add_doc(\"This is a document.\")\n&gt;&gt;&gt; corpus = corpus.transform(\"text\", lambda x: x[:10])\n&gt;&gt;&gt; list(corpus.docs)\n[('Kjco', Document('Kjco', {'text': CharacterLayer('This is a ')}))]\n</code></pre> Source code in <code>teanga/corpus.py</code> <pre><code>def transform(self, layer: str, transform: \n              Callable[[str], str]) -&gt; TransformedCorpus:\n    \"\"\"Transform a layer in the corpus.\n\n    Args:\n        layer: str\n            The name of the layer to transform.\n        transform: Callable[[str], str]\n            The transformation function.\n\n    Examples:\n        &gt;&gt;&gt; corpus = Corpus()\n        &gt;&gt;&gt; corpus.add_layer_meta(\"text\")\n        &gt;&gt;&gt; doc = corpus.add_doc(\"This is a document.\")\n        &gt;&gt;&gt; corpus = corpus.transform(\"text\", lambda x: x[:10])\n        &gt;&gt;&gt; list(corpus.docs)\n        [('Kjco', Document('Kjco', {'text': CharacterLayer('This is a ')}))]\n    \"\"\"\n    return TransformedCorpus(self, {layer: transform})\n</code></pre>"},{"location":"reference/reference-corpus/#teanga.corpus.Corpus.upper","title":"<code>upper()</code>","text":"<p>Uppercase all the text in the corpus.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; corpus = Corpus()\n&gt;&gt;&gt; corpus.add_layer_meta(\"text\")\n&gt;&gt;&gt; doc = corpus.add_doc(\"This is a document.\")\n&gt;&gt;&gt; corpus = corpus.upper()\n&gt;&gt;&gt; list(corpus.docs)\n[('Kjco', Document('Kjco', {'text': CharacterLayer('THIS IS A DOCUMENT.')}))]\n</code></pre> Source code in <code>teanga/corpus.py</code> <pre><code>def upper(self) -&gt; TransformedCorpus:\n    \"\"\"Uppercase all the text in the corpus.\n\n    Examples:\n        &gt;&gt;&gt; corpus = Corpus()\n        &gt;&gt;&gt; corpus.add_layer_meta(\"text\")\n        &gt;&gt;&gt; doc = corpus.add_doc(\"This is a document.\")\n        &gt;&gt;&gt; corpus = corpus.upper()\n        &gt;&gt;&gt; list(corpus.docs)\n        [('Kjco', Document('Kjco', {'text': CharacterLayer('THIS IS A DOCUMENT.')}))]\n    \"\"\"\n    text_layers = [layer for layer in self.meta \n                   if self.meta[layer].layer_type == \"characters\"]\n    return TransformedCorpus(self, {layer: lambda x: x.upper()\n                                    for layer in text_layers})\n</code></pre>"},{"location":"reference/reference-corpus/#teanga.corpus.Corpus.val_freq","title":"<code>val_freq(layer, condition=None)</code>","text":"<p>Get the frequency of a value in a layer.</p> <p>Returns:</p> Type Description <code>Counter</code> <p>A dictionary with the frequency of each value.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; corpus = Corpus()\n&gt;&gt;&gt; corpus.add_layer_meta(\"text\")\n&gt;&gt;&gt; corpus.add_layer_meta(\"words\", layer_type=\"span\", base=\"text\")\n&gt;&gt;&gt; corpus.add_layer_meta(\"pos\", layer_type=\"seq\", base=\"words\",\n...                        data=[\"NOUN\", \"VERB\", \"ADJ\"])\n&gt;&gt;&gt; doc = corpus.add_doc(\"Colorless green ideas sleep furiously.\")\n&gt;&gt;&gt; doc.words = [(0, 9), (10, 15), (16, 21), (22, 28), (29, 37)]\n&gt;&gt;&gt; doc.pos = [\"ADJ\", \"ADJ\", \"NOUN\", \"VERB\", \"ADV\"]\n&gt;&gt;&gt; corpus.val_freq(\"pos\")\nCounter({'ADJ': 2, 'NOUN': 1, 'VERB': 1, 'ADV': 1})\n&gt;&gt;&gt; corpus.val_freq(\"pos\", [\"NOUN\", \"VERB\"])\nCounter({'NOUN': 1, 'VERB': 1})\n&gt;&gt;&gt; corpus.val_freq(\"pos\", lambda x: x[0] == \"A\")\nCounter({'ADJ': 2, 'ADV': 1})\n</code></pre> Source code in <code>teanga/corpus.py</code> <pre><code>def val_freq(self, layer:str,\n             condition = None) -&gt; Counter:\n    \"\"\"Get the frequency of a value in a layer.\n\n    Args:\n        layer\n            The layer to get the frequency of (e.g. \"pos\")\n        condition\n            The value to get the frequency of. If a single value is given, the\n            frequency of this single value is returned. If a list of values is\n            given, the frequency of each value is returned. If a function is\n            given, all values are returned for which the function returns True.\n\n    Returns:\n        A dictionary with the frequency of each value.\n\n    Examples:\n        &gt;&gt;&gt; corpus = Corpus()\n        &gt;&gt;&gt; corpus.add_layer_meta(\"text\")\n        &gt;&gt;&gt; corpus.add_layer_meta(\"words\", layer_type=\"span\", base=\"text\")\n        &gt;&gt;&gt; corpus.add_layer_meta(\"pos\", layer_type=\"seq\", base=\"words\",\n        ...                        data=[\"NOUN\", \"VERB\", \"ADJ\"])\n        &gt;&gt;&gt; doc = corpus.add_doc(\"Colorless green ideas sleep furiously.\")\n        &gt;&gt;&gt; doc.words = [(0, 9), (10, 15), (16, 21), (22, 28), (29, 37)]\n        &gt;&gt;&gt; doc.pos = [\"ADJ\", \"ADJ\", \"NOUN\", \"VERB\", \"ADV\"]\n        &gt;&gt;&gt; corpus.val_freq(\"pos\")\n        Counter({'ADJ': 2, 'NOUN': 1, 'VERB': 1, 'ADV': 1})\n        &gt;&gt;&gt; corpus.val_freq(\"pos\", [\"NOUN\", \"VERB\"])\n        Counter({'NOUN': 1, 'VERB': 1})\n        &gt;&gt;&gt; corpus.val_freq(\"pos\", lambda x: x[0] == \"A\")\n        Counter({'ADJ': 2, 'ADV': 1})\n\n    \"\"\"\n    if condition is None:\n        return Counter(val\n            for _, doc in self.docs\n            for val in doc[layer].data)\n    elif isinstance(condition, str):\n        return Counter(val\n            for _, doc in self.docs\n            for val in doc[layer].data\n                       if val == condition)\n    elif callable(condition):\n        return Counter(val\n            for _, doc in self.docs\n            for val in doc[layer].data\n                       if condition(val))\n    else:\n        return Counter(val\n            for _, doc in self.docs\n            for val in doc[layer].data\n                       if val in condition)\n</code></pre>"},{"location":"reference/reference-document/","title":"Teanga Document Module","text":"<p>Document class for storing and processing text data.</p> Source code in <code>teanga/document.py</code> <pre><code>class Document:\n    \"\"\"Document class for storing and processing text data.\"\"\"\n    def __init__(self, meta:dict[str,Union[LayerDesc,dict]], \n                 corpus=None, id=None, **kwargs):\n        self._meta = meta\n        self.layers = {}\n        self.id = id\n        self.corpus = None\n        self.add_layers({key: value \n                         for key, value in kwargs.items() \n                         if not key.startswith(\"_\")})\n        self.corpus = corpus\n\n    def copy(self):\n        \"\"\"Return a copy of the document.\"\"\"\n        return Document(self._meta, self.corpus, self.id, \n                        **{key: value for key, value in self.layers.items()})\n\n    @deprecated(reason=\"Use __setitem__ instead, e.g., doc['text'] = \\\n'This is a document.'\")\n    def add_layer(self, name:str, value : Union[str,list,'Layer']) -&gt; 'Layer':\n        self[name] = value\n\n    def __setitem__(self, name:str, value : Union[str,list,'Layer']) -&gt; 'Layer':\n        \"\"\"Add or set a layer to the document.\n\n        Parameters:\n        -----------\n        name: str\n            Name of the layer.\n        value: str\n            Value of the layer, a single string or \n            a list of values that are suitable for the \n            Teanga layer type or a Layer object.\n\n        Examples:\n        ---------\n        &gt;&gt;&gt; from teanga import Corpus\n        &gt;&gt;&gt; corpus = Corpus()\n        &gt;&gt;&gt; corpus.add_layer_meta(\"text\")\n        &gt;&gt;&gt; corpus.add_layer_meta(\"words\", layer_type=\"span\", base=\"text\")\n        &gt;&gt;&gt; corpus.add_layer_meta(\"pos\", layer_type=\"seq\", base=\"words\", data=\"string\")\n        &gt;&gt;&gt; doc = corpus.add_doc(\"This is a document.\")\n        &gt;&gt;&gt; doc[\"words\"] = [(0,4), (5,7), (8,9), (10,18), (18,19)]\n        &gt;&gt;&gt; doc[\"pos\"] = [\"DT\", \"VBZ\", \"DT\", \"NN\", \".\"]\n        &gt;&gt;&gt; doc\n        Document('Kjco', {'text': CharacterLayer('This is a document.'), \\\n'words': SpanLayer([(0, 4), (5, 7), (8, 9), (10, 18), (18, 19)]), \\\n'pos': SeqLayer(['DT', 'VBZ', 'DT', 'NN', '.'])})\n        &gt;&gt;&gt; corpus.doc_by_id(\"Kjco\")\n        Document('Kjco', {'text': CharacterLayer('This is a document.'), \\\n'words': SpanLayer([(0, 4), (5, 7), (8, 9), (10, 18), (18, 19)]), \\\n'pos': SeqLayer(['DT', 'VBZ', 'DT', 'NN', '.'])})\n        \"\"\"\n        if name not in self._meta:\n            raise Exception(\"Layer with name \" + name + \" does not exist.\")\n        if value is None and self._meta[name].default is not None:\n            value = self._meta[name].default\n        if isinstance(value, Layer):\n            self.layers[name] = value\n            return value\n        if self._meta[name].layer_type == \"characters\":\n            self.layers[name] = CharacterLayer(name, self, str(value))\n        elif (self._meta[name].base not in self.layers and\n                self._meta[self._meta[name].base].default is None):\n            raise Exception(\"Cannot add layer \" + name + \" because sublayer \" +\n            self._meta[name].base + \" does not exist.\")\n        elif self._meta[name].layer_type == \"seq\":\n            if not isinstance(value, list):\n                raise Exception(\"Value of layer \" + name + \" must be a list.\")\n            if self._meta[name].base in self.layers:\n                base_layer_len = len(self.layers[self._meta[name].base])\n            elif self._meta[self._meta[name].base].default is not None:\n                base_layer_len = len(self._meta[self._meta[name].base].default)\n            else:\n                raise Exception(\"Cannot add layer \" + name + \" because sublayer \" +\n                    self._meta[name].base + \" does not exist.\")\n            if len(value) != base_layer_len:\n                raise Exception(\"Value of layer \" + name + \" must have the \" +\n                \"same length as layer \" + self._meta[name].base + \".\")\n            self.layers[name] = SeqLayer(name, self, value)\n        elif self._meta[name].layer_type == \"span\":\n            if not isinstance(value, list):\n                raise Exception(\"Value of layer \" + name + \" must be a list.\")\n            self.layers[name] = SpanLayer(name, self, value)\n        elif self._meta[name].layer_type == \"div\":\n            if not isinstance(value, list):\n                raise Exception(\"Value of layer \" + name + \" must be a list.\")\n            self.layers[name] = DivLayer(name, self, value)\n        elif self._meta[name].layer_type == \"element\":\n            if not isinstance(value, list):\n                raise Exception(\"Value of layer \" + name + \" must be a list.\")\n            self.layers[name] = ElementLayer(name, self, value)\n        else:\n            raise Exception(\"Unknown layer type \" + self._meta[name].layer_type + \n            \" for layer \" + name + \".\")\n        if self.corpus and self.id:\n            data_fields = {name: layer.raw\n                           for (name,layer) in self.layers.items()}\n            self.corpus.update_doc(self.id, data_fields)\n\n        return self.layers[name]\n\n    def __getattr__(self, name:str) -&gt; 'Layer':\n        \"\"\"Return the layer with the given name.\"\"\"\n        if name in self.layers:\n            return self.layers[name]\n        else:\n            raise AttributeError(\"No such layer: \" + name)\n\n    def __setattr__(self, name:str, value) -&gt; None:\n        \"\"\"Set the value of a layer.\"\"\"\n        if name != \"layers\" and name != \"_meta\" and name != \"corpus\" and name != \"id\":\n            self.__setitem__(name, value)\n        else:\n            super().__setattr__(name, value)\n\n    def add_layers(self, layers:dict):\n        \"\"\"Add multiple layers in one go.\n\n        Parameters:\n        -----------\n\n        layers: dict\n            A dictionary of layer names and values.\n\n        Examples:\n        ---------\n\n        &gt;&gt;&gt; from teanga import Corpus\n        &gt;&gt;&gt; corpus = Corpus()\n        &gt;&gt;&gt; corpus.add_layer_meta(\"text\")\n        &gt;&gt;&gt; corpus.add_layer_meta(\"words\", layer_type=\"span\", base=\"text\")\n        &gt;&gt;&gt; corpus.add_layer_meta(\"pos\", layer_type=\"seq\", base=\"words\", data=\"string\")\n        &gt;&gt;&gt; doc = corpus.add_doc(\"This is a document.\")\n        &gt;&gt;&gt; doc.add_layers({\"words\": [(0,4), (5,7), (8,9), (10,18), (18,19)], \\\n\"pos\": [\"DT\", \"VBZ\", \"DT\", \"NN\", \".\"]})\n        \"\"\"\n        added = set(self.layers.keys())\n        to_add = set(layers.keys())\n\n        for layer in self._meta:\n            if layer not in layers and self._meta[layer].default is not None:\n                added.add(layer)\n\n        while len(to_add) &gt; 0:\n            for name in to_add.copy():\n                data = layers[name]\n                if self._meta[name].base is None or self._meta[name].base in added:\n                    self[name] = data\n                    added.add(name)\n                    to_add.remove(name)\n                elif (self._meta[name].base is not None \n                      and self._meta[name].base not in layers \n                      and self._meta[name].base not in added):\n                    raise Exception(\"Cannot add layer \" + name + \" because sublayer \" +\n                    self._meta[name].base + \" does not exist.\")\n\n    def __getitem__(self, name:str):\n        \"\"\"Return the value of a layer.\n\n        Parameters:\n        -----------\n\n        name: str\n            The name of the layer.\n        \"\"\"\n        if name not in self._meta:\n            raise Exception(\"Layer with name \" + name + \" does not exist.\")\n        return self.layers[name]\n\n    def __iter__(self):\n        \"\"\"Return an iterator over the layers.\"\"\"\n        return iter(self.layers)\n\n    def __contains__(self, name:str) -&gt; bool:\n        \"\"\"Return whether a layer with the given name exists.\"\"\"\n        return name in self.layers\n\n    @deprecated(reason=\"Access layers using __getitem__ instead, e.g., doc['text']\")\n    def get_layer(self, name:str):\n        return self[name]\n\n    @property\n    def meta(self):\n        return self._meta\n\n    def text_for_layer(self, layer_name:str) -&gt; Generator[None,None,str]:\n        \"\"\"Return the text for a layer.\n\n        Parameters:\n        -----------\n\n        layer_name: str\n            The name of the layer.\n\n        Returns:\n        --------\n        A generator that yields the text for the layer.\n\n        Examples:\n        ---------\n        &gt;&gt;&gt; from teanga import Corpus\n        &gt;&gt;&gt; corpus = Corpus()\n        &gt;&gt;&gt; corpus.add_layer_meta(\"text\")\n        &gt;&gt;&gt; corpus.add_layer_meta(\"words\", layer_type=\"span\", base=\"text\")\n        &gt;&gt;&gt; corpus.add_layer_meta(\"pos\", layer_type=\"seq\", base=\"words\")\n        &gt;&gt;&gt; doc = corpus.add_doc(\"This is a document.\")\n        &gt;&gt;&gt; doc.words = [[0,4], [5,7], [8,9], [10,18], [18,19]]\n        &gt;&gt;&gt; doc.pos = [\"DT\", \"VBZ\", \"DT\", \"NN\", \".\"]\n        &gt;&gt;&gt; list(doc.text_for_layer(\"text\"))\n        ['T', 'h', 'i', 's', ' ', 'i', 's', ' ', 'a', ' ', 'd', 'o', \\\n'c', 'u', 'm', 'e', 'n', 't', '.']\n        &gt;&gt;&gt; list(doc.text_for_layer(\"words\"))\n        ['This', 'is', 'a', 'document', '.']\n        &gt;&gt;&gt; list(doc.text_for_layer(\"pos\"))\n        ['This', 'is', 'a', 'document', '.']\n        \"\"\"\n        if layer_name not in self._meta:\n            raise Exception(\"Layer with name \" + layer_name + \" does not exist.\")\n        if self._meta[layer_name].layer_type == \"characters\":\n            return self.layers[layer_name].text[0]\n        else:\n            text_layer = layer_name\n            while self._meta[text_layer].layer_type != \"characters\":\n                text_layer = self._meta[text_layer].base\n            indexes = self.layers[layer_name].indexes(text_layer)\n            return (self.layers[text_layer].text[0][start:end]\n                    for start, end in indexes)\n\n    def to_json(self) -&gt; str:\n        \"\"\"Return the JSON representation of the document.\"\"\"\n        return {layer_id: self.layers[layer_id].raw\n                for layer_id in self.layers.keys()}\n\n    @staticmethod\n    def from_json(json:dict, meta:dict, corpus=None, id=None) -&gt; 'Document':\n        \"\"\"Return a document from its JSON representation.\"\"\"\n        doc = Document(meta, corpus, id)\n        doc.add_layers(json)\n        return doc\n\n    def __repr__(self):\n        return \"Document(\" + repr(self.id) + \", \" + repr(self.layers) + \")\"\n</code></pre>"},{"location":"reference/reference-document/#teanga.document.Document.__contains__","title":"<code>__contains__(name)</code>","text":"<p>Return whether a layer with the given name exists.</p> Source code in <code>teanga/document.py</code> <pre><code>def __contains__(self, name:str) -&gt; bool:\n    \"\"\"Return whether a layer with the given name exists.\"\"\"\n    return name in self.layers\n</code></pre>"},{"location":"reference/reference-document/#teanga.document.Document.__getattr__","title":"<code>__getattr__(name)</code>","text":"<p>Return the layer with the given name.</p> Source code in <code>teanga/document.py</code> <pre><code>def __getattr__(self, name:str) -&gt; 'Layer':\n    \"\"\"Return the layer with the given name.\"\"\"\n    if name in self.layers:\n        return self.layers[name]\n    else:\n        raise AttributeError(\"No such layer: \" + name)\n</code></pre>"},{"location":"reference/reference-document/#teanga.document.Document.__getitem__","title":"<code>__getitem__(name)</code>","text":"<p>Return the value of a layer.</p>"},{"location":"reference/reference-document/#teanga.document.Document.__getitem__--parameters","title":"Parameters:","text":"str <p>The name of the layer.</p> Source code in <code>teanga/document.py</code> <pre><code>def __getitem__(self, name:str):\n    \"\"\"Return the value of a layer.\n\n    Parameters:\n    -----------\n\n    name: str\n        The name of the layer.\n    \"\"\"\n    if name not in self._meta:\n        raise Exception(\"Layer with name \" + name + \" does not exist.\")\n    return self.layers[name]\n</code></pre>"},{"location":"reference/reference-document/#teanga.document.Document.__iter__","title":"<code>__iter__()</code>","text":"<p>Return an iterator over the layers.</p> Source code in <code>teanga/document.py</code> <pre><code>def __iter__(self):\n    \"\"\"Return an iterator over the layers.\"\"\"\n    return iter(self.layers)\n</code></pre>"},{"location":"reference/reference-document/#teanga.document.Document.__setattr__","title":"<code>__setattr__(name, value)</code>","text":"<p>Set the value of a layer.</p> Source code in <code>teanga/document.py</code> <pre><code>def __setattr__(self, name:str, value) -&gt; None:\n    \"\"\"Set the value of a layer.\"\"\"\n    if name != \"layers\" and name != \"_meta\" and name != \"corpus\" and name != \"id\":\n        self.__setitem__(name, value)\n    else:\n        super().__setattr__(name, value)\n</code></pre>"},{"location":"reference/reference-document/#teanga.document.Document.__setitem__","title":"<code>__setitem__(name, value)</code>","text":"<p>Add or set a layer to the document.</p>"},{"location":"reference/reference-document/#teanga.document.Document.__setitem__--parameters","title":"Parameters:","text":"<p>name: str     Name of the layer. value: str     Value of the layer, a single string or      a list of values that are suitable for the      Teanga layer type or a Layer object.</p>"},{"location":"reference/reference-document/#teanga.document.Document.__setitem__--examples","title":"Examples:","text":"<p>from teanga import Corpus corpus = Corpus() corpus.add_layer_meta(\"text\") corpus.add_layer_meta(\"words\", layer_type=\"span\", base=\"text\") corpus.add_layer_meta(\"pos\", layer_type=\"seq\", base=\"words\", data=\"string\") doc = corpus.add_doc(\"This is a document.\") doc[\"words\"] = [(0,4), (5,7), (8,9), (10,18), (18,19)] doc[\"pos\"] = [\"DT\", \"VBZ\", \"DT\", \"NN\", \".\"] doc Document('Kjco', {'text': CharacterLayer('This is a document.'), 'words': SpanLayer([(0, 4), (5, 7), (8, 9), (10, 18), (18, 19)]), 'pos': SeqLayer(['DT', 'VBZ', 'DT', 'NN', '.'])}) corpus.doc_by_id(\"Kjco\") Document('Kjco', {'text': CharacterLayer('This is a document.'), 'words': SpanLayer([(0, 4), (5, 7), (8, 9), (10, 18), (18, 19)]), 'pos': SeqLayer(['DT', 'VBZ', 'DT', 'NN', '.'])})</p> Source code in <code>teanga/document.py</code> <pre><code>    def __setitem__(self, name:str, value : Union[str,list,'Layer']) -&gt; 'Layer':\n        \"\"\"Add or set a layer to the document.\n\n        Parameters:\n        -----------\n        name: str\n            Name of the layer.\n        value: str\n            Value of the layer, a single string or \n            a list of values that are suitable for the \n            Teanga layer type or a Layer object.\n\n        Examples:\n        ---------\n        &gt;&gt;&gt; from teanga import Corpus\n        &gt;&gt;&gt; corpus = Corpus()\n        &gt;&gt;&gt; corpus.add_layer_meta(\"text\")\n        &gt;&gt;&gt; corpus.add_layer_meta(\"words\", layer_type=\"span\", base=\"text\")\n        &gt;&gt;&gt; corpus.add_layer_meta(\"pos\", layer_type=\"seq\", base=\"words\", data=\"string\")\n        &gt;&gt;&gt; doc = corpus.add_doc(\"This is a document.\")\n        &gt;&gt;&gt; doc[\"words\"] = [(0,4), (5,7), (8,9), (10,18), (18,19)]\n        &gt;&gt;&gt; doc[\"pos\"] = [\"DT\", \"VBZ\", \"DT\", \"NN\", \".\"]\n        &gt;&gt;&gt; doc\n        Document('Kjco', {'text': CharacterLayer('This is a document.'), \\\n'words': SpanLayer([(0, 4), (5, 7), (8, 9), (10, 18), (18, 19)]), \\\n'pos': SeqLayer(['DT', 'VBZ', 'DT', 'NN', '.'])})\n        &gt;&gt;&gt; corpus.doc_by_id(\"Kjco\")\n        Document('Kjco', {'text': CharacterLayer('This is a document.'), \\\n'words': SpanLayer([(0, 4), (5, 7), (8, 9), (10, 18), (18, 19)]), \\\n'pos': SeqLayer(['DT', 'VBZ', 'DT', 'NN', '.'])})\n        \"\"\"\n        if name not in self._meta:\n            raise Exception(\"Layer with name \" + name + \" does not exist.\")\n        if value is None and self._meta[name].default is not None:\n            value = self._meta[name].default\n        if isinstance(value, Layer):\n            self.layers[name] = value\n            return value\n        if self._meta[name].layer_type == \"characters\":\n            self.layers[name] = CharacterLayer(name, self, str(value))\n        elif (self._meta[name].base not in self.layers and\n                self._meta[self._meta[name].base].default is None):\n            raise Exception(\"Cannot add layer \" + name + \" because sublayer \" +\n            self._meta[name].base + \" does not exist.\")\n        elif self._meta[name].layer_type == \"seq\":\n            if not isinstance(value, list):\n                raise Exception(\"Value of layer \" + name + \" must be a list.\")\n            if self._meta[name].base in self.layers:\n                base_layer_len = len(self.layers[self._meta[name].base])\n            elif self._meta[self._meta[name].base].default is not None:\n                base_layer_len = len(self._meta[self._meta[name].base].default)\n            else:\n                raise Exception(\"Cannot add layer \" + name + \" because sublayer \" +\n                    self._meta[name].base + \" does not exist.\")\n            if len(value) != base_layer_len:\n                raise Exception(\"Value of layer \" + name + \" must have the \" +\n                \"same length as layer \" + self._meta[name].base + \".\")\n            self.layers[name] = SeqLayer(name, self, value)\n        elif self._meta[name].layer_type == \"span\":\n            if not isinstance(value, list):\n                raise Exception(\"Value of layer \" + name + \" must be a list.\")\n            self.layers[name] = SpanLayer(name, self, value)\n        elif self._meta[name].layer_type == \"div\":\n            if not isinstance(value, list):\n                raise Exception(\"Value of layer \" + name + \" must be a list.\")\n            self.layers[name] = DivLayer(name, self, value)\n        elif self._meta[name].layer_type == \"element\":\n            if not isinstance(value, list):\n                raise Exception(\"Value of layer \" + name + \" must be a list.\")\n            self.layers[name] = ElementLayer(name, self, value)\n        else:\n            raise Exception(\"Unknown layer type \" + self._meta[name].layer_type + \n            \" for layer \" + name + \".\")\n        if self.corpus and self.id:\n            data_fields = {name: layer.raw\n                           for (name,layer) in self.layers.items()}\n            self.corpus.update_doc(self.id, data_fields)\n\n        return self.layers[name]\n</code></pre>"},{"location":"reference/reference-document/#teanga.document.Document.add_layers","title":"<code>add_layers(layers)</code>","text":"<p>Add multiple layers in one go.</p>"},{"location":"reference/reference-document/#teanga.document.Document.add_layers--parameters","title":"Parameters:","text":"dict <p>A dictionary of layer names and values.</p>"},{"location":"reference/reference-document/#teanga.document.Document.add_layers--examples","title":"Examples:","text":"<p>from teanga import Corpus corpus = Corpus() corpus.add_layer_meta(\"text\") corpus.add_layer_meta(\"words\", layer_type=\"span\", base=\"text\") corpus.add_layer_meta(\"pos\", layer_type=\"seq\", base=\"words\", data=\"string\") doc = corpus.add_doc(\"This is a document.\") doc.add_layers({\"words\": [(0,4), (5,7), (8,9), (10,18), (18,19)], \"pos\": [\"DT\", \"VBZ\", \"DT\", \"NN\", \".\"]})</p> Source code in <code>teanga/document.py</code> <pre><code>    def add_layers(self, layers:dict):\n        \"\"\"Add multiple layers in one go.\n\n        Parameters:\n        -----------\n\n        layers: dict\n            A dictionary of layer names and values.\n\n        Examples:\n        ---------\n\n        &gt;&gt;&gt; from teanga import Corpus\n        &gt;&gt;&gt; corpus = Corpus()\n        &gt;&gt;&gt; corpus.add_layer_meta(\"text\")\n        &gt;&gt;&gt; corpus.add_layer_meta(\"words\", layer_type=\"span\", base=\"text\")\n        &gt;&gt;&gt; corpus.add_layer_meta(\"pos\", layer_type=\"seq\", base=\"words\", data=\"string\")\n        &gt;&gt;&gt; doc = corpus.add_doc(\"This is a document.\")\n        &gt;&gt;&gt; doc.add_layers({\"words\": [(0,4), (5,7), (8,9), (10,18), (18,19)], \\\n\"pos\": [\"DT\", \"VBZ\", \"DT\", \"NN\", \".\"]})\n        \"\"\"\n        added = set(self.layers.keys())\n        to_add = set(layers.keys())\n\n        for layer in self._meta:\n            if layer not in layers and self._meta[layer].default is not None:\n                added.add(layer)\n\n        while len(to_add) &gt; 0:\n            for name in to_add.copy():\n                data = layers[name]\n                if self._meta[name].base is None or self._meta[name].base in added:\n                    self[name] = data\n                    added.add(name)\n                    to_add.remove(name)\n                elif (self._meta[name].base is not None \n                      and self._meta[name].base not in layers \n                      and self._meta[name].base not in added):\n                    raise Exception(\"Cannot add layer \" + name + \" because sublayer \" +\n                    self._meta[name].base + \" does not exist.\")\n</code></pre>"},{"location":"reference/reference-document/#teanga.document.Document.copy","title":"<code>copy()</code>","text":"<p>Return a copy of the document.</p> Source code in <code>teanga/document.py</code> <pre><code>def copy(self):\n    \"\"\"Return a copy of the document.\"\"\"\n    return Document(self._meta, self.corpus, self.id, \n                    **{key: value for key, value in self.layers.items()})\n</code></pre>"},{"location":"reference/reference-document/#teanga.document.Document.from_json","title":"<code>from_json(json, meta, corpus=None, id=None)</code>  <code>staticmethod</code>","text":"<p>Return a document from its JSON representation.</p> Source code in <code>teanga/document.py</code> <pre><code>@staticmethod\ndef from_json(json:dict, meta:dict, corpus=None, id=None) -&gt; 'Document':\n    \"\"\"Return a document from its JSON representation.\"\"\"\n    doc = Document(meta, corpus, id)\n    doc.add_layers(json)\n    return doc\n</code></pre>"},{"location":"reference/reference-document/#teanga.document.Document.text_for_layer","title":"<code>text_for_layer(layer_name)</code>","text":"<p>Return the text for a layer.</p>"},{"location":"reference/reference-document/#teanga.document.Document.text_for_layer--parameters","title":"Parameters:","text":"str <p>The name of the layer.</p>"},{"location":"reference/reference-document/#teanga.document.Document.text_for_layer--returns","title":"Returns:","text":"<p>A generator that yields the text for the layer.</p>"},{"location":"reference/reference-document/#teanga.document.Document.text_for_layer--examples","title":"Examples:","text":"<p>from teanga import Corpus corpus = Corpus() corpus.add_layer_meta(\"text\") corpus.add_layer_meta(\"words\", layer_type=\"span\", base=\"text\") corpus.add_layer_meta(\"pos\", layer_type=\"seq\", base=\"words\") doc = corpus.add_doc(\"This is a document.\") doc.words = [[0,4], [5,7], [8,9], [10,18], [18,19]] doc.pos = [\"DT\", \"VBZ\", \"DT\", \"NN\", \".\"] list(doc.text_for_layer(\"text\")) ['T', 'h', 'i', 's', ' ', 'i', 's', ' ', 'a', ' ', 'd', 'o', 'c', 'u', 'm', 'e', 'n', 't', '.'] list(doc.text_for_layer(\"words\")) ['This', 'is', 'a', 'document', '.'] list(doc.text_for_layer(\"pos\")) ['This', 'is', 'a', 'document', '.']</p> Source code in <code>teanga/document.py</code> <pre><code>    def text_for_layer(self, layer_name:str) -&gt; Generator[None,None,str]:\n        \"\"\"Return the text for a layer.\n\n        Parameters:\n        -----------\n\n        layer_name: str\n            The name of the layer.\n\n        Returns:\n        --------\n        A generator that yields the text for the layer.\n\n        Examples:\n        ---------\n        &gt;&gt;&gt; from teanga import Corpus\n        &gt;&gt;&gt; corpus = Corpus()\n        &gt;&gt;&gt; corpus.add_layer_meta(\"text\")\n        &gt;&gt;&gt; corpus.add_layer_meta(\"words\", layer_type=\"span\", base=\"text\")\n        &gt;&gt;&gt; corpus.add_layer_meta(\"pos\", layer_type=\"seq\", base=\"words\")\n        &gt;&gt;&gt; doc = corpus.add_doc(\"This is a document.\")\n        &gt;&gt;&gt; doc.words = [[0,4], [5,7], [8,9], [10,18], [18,19]]\n        &gt;&gt;&gt; doc.pos = [\"DT\", \"VBZ\", \"DT\", \"NN\", \".\"]\n        &gt;&gt;&gt; list(doc.text_for_layer(\"text\"))\n        ['T', 'h', 'i', 's', ' ', 'i', 's', ' ', 'a', ' ', 'd', 'o', \\\n'c', 'u', 'm', 'e', 'n', 't', '.']\n        &gt;&gt;&gt; list(doc.text_for_layer(\"words\"))\n        ['This', 'is', 'a', 'document', '.']\n        &gt;&gt;&gt; list(doc.text_for_layer(\"pos\"))\n        ['This', 'is', 'a', 'document', '.']\n        \"\"\"\n        if layer_name not in self._meta:\n            raise Exception(\"Layer with name \" + layer_name + \" does not exist.\")\n        if self._meta[layer_name].layer_type == \"characters\":\n            return self.layers[layer_name].text[0]\n        else:\n            text_layer = layer_name\n            while self._meta[text_layer].layer_type != \"characters\":\n                text_layer = self._meta[text_layer].base\n            indexes = self.layers[layer_name].indexes(text_layer)\n            return (self.layers[text_layer].text[0][start:end]\n                    for start, end in indexes)\n</code></pre>"},{"location":"reference/reference-document/#teanga.document.Document.to_json","title":"<code>to_json()</code>","text":"<p>Return the JSON representation of the document.</p> Source code in <code>teanga/document.py</code> <pre><code>def to_json(self) -&gt; str:\n    \"\"\"Return the JSON representation of the document.\"\"\"\n    return {layer_id: self.layers[layer_id].raw\n            for layer_id in self.layers.keys()}\n</code></pre>"},{"location":"reference/reference/","title":"Teanga Corpus Module","text":"<p>Add the meta data of a service to the corpus. This is normally  required to call apply to a service</p> <p>Parameters:</p> Name Type Description Default <code>service</code> <code>Service</code> <p>The service to add.</p> required <p>Examples:</p> <pre><code>&gt;&gt;&gt; corpus = Corpus()\n&gt;&gt;&gt; class ExampleService:\n...     def requires(self):\n...         return {\"text\": {\"type\": \"characters\"}}\n...     def produces(self):\n...         return {\"first_char\": {\"type\": \"characters\"}}\n&gt;&gt;&gt; corpus.add_meta_from_service(ExampleService())\n</code></pre> <p>Returns:</p> Type Description <p>A number representing the arithmetic sum of <code>a</code> and <code>b</code>.</p> Source code in <code>teanga/corpus.py</code> <pre><code>def add_meta_from_service(self, service : Service):\n    \"\"\"Add the meta data of a service to the corpus. This is normally \n    required to call apply to a service\n\n    Args:\n        service: The service to add.\n\n    Examples:\n        &gt;&gt;&gt; corpus = Corpus()\n        &gt;&gt;&gt; class ExampleService:\n        ...     def requires(self):\n        ...         return {\"text\": {\"type\": \"characters\"}}\n        ...     def produces(self):\n        ...         return {\"first_char\": {\"type\": \"characters\"}}\n        &gt;&gt;&gt; corpus.add_meta_from_service(ExampleService())\n\n    Returns:\n        A number representing the arithmetic sum of `a` and `b`.\n    \"\"\"\n    for name, layer in chain(service.requires().items(), \n                             service.produces().items()):\n        if \"type\" not in layer:\n            raise Exception(\"Layer type not specified.\" + str(layer))\n        desc = _layer_desc_from_kwargs(layer)\n        if name in self.meta and self.meta[name] != desc:\n            raise Exception(\"Layer with name \" + name +\n                            \" already exists with different meta.\")\n        elif name not in self.meta:\n            self.add_layer_meta(name, **layer)\n</code></pre>"}]}